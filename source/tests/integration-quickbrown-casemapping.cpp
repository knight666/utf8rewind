#include "tests-base.hpp"

#include "../helpers/helpers-locale.hpp"
#include "../helpers/helpers-strings.hpp"

class QuickbrownCaseMapping
	: public ::testing::Test
{

protected:

	void SetUp()
	{
		errors = UTF8_ERR_NONE;

		fileRegular.open("testdata/quickbrown.txt", std::ios_base::in);
		ASSERT_TRUE(fileRegular.is_open());

		fileUppercase.open("testdata/quickbrown_uppercase.txt", std::ios_base::in);
		ASSERT_TRUE(fileUppercase.is_open());

		fileLowercase.open("testdata/quickbrown_lowercase.txt", std::ios_base::in);
		ASSERT_TRUE(fileLowercase.is_open());

		fileTitlecase.open("testdata/quickbrown_titlecase.txt", std::ios_base::in);
		ASSERT_TRUE(fileTitlecase.is_open());
	}

	void TearDown()
	{
		fileTitlecase.close();
		fileLowercase.close();
		fileUppercase.close();
		fileRegular.close();
	}

	std::string ReadRegular(size_t position, size_t length)
	{
		std::string result;

		fileRegular.seekg(position, std::ios::beg);
		if (fileRegular.eof())
		{
			return result;
		}

		result.resize(length + 1);
		fileRegular.read(&result[0], length);

		return result;
	}

	std::string ReadUppercase(size_t position, size_t length)
	{
		std::string result;

		fileUppercase.seekg(position, std::ios::beg);
		if (fileUppercase.eof())
		{
			return result;
		}

		result.resize(length + 1);
		fileUppercase.read(&result[0], length);

		return result;
	}

	std::string ReadLowercase(size_t position, size_t length)
	{
		std::string result;

		fileLowercase.seekg(position, std::ios::beg);
		if (fileLowercase.eof())
		{
			return result;
		}

		result.resize(length + 1);
		fileLowercase.read(&result[0], length);

		return result;
	}

	std::string ReadTitlecase(size_t position, size_t length)
	{
		std::string result;

		fileTitlecase.seekg(position, std::ios::beg);
		if (fileTitlecase.eof())
		{
			return result;
		}

		result.resize(length + 1);
		fileTitlecase.read(&result[0], length);

		return result;
	}

	std::fstream fileRegular;
	std::fstream fileUppercase;
	std::fstream fileLowercase;
	std::fstream fileTitlecase;
	int32_t errors;

};

TEST_F(QuickbrownCaseMapping, DanishUppercase)
{
	std::string i = ReadRegular(271, 95);
	EXPECT_UTF8EQ("  Quizdeltagerne spiste jordb\xc3\xa6r med fl\xC3\xB8" "de, mens cirkusklovnen\n\
  Wolther spillede p\xC3\xA5 xylofon.", i.c_str());

	std::string eu = ReadUppercase(271, 95);
	EXPECT_UTF8EQ("  QUIZDELTAGERNE SPISTE JORDB\xc3\x86R MED FL\xC3\x98" "DE, MENS CIRKUSKLOVNEN\n\
  WOLTHER SPILLEDE P\xC3\x85 XYLOFON.", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  QUIZDELTAGERNE SPISTE JORDB\xc3\x86R MED FL\xC3\x98" "DE, MENS CIRKUSKLOVNEN\n\
  WOLTHER SPILLEDE P\xC3\x85 XYLOFON.", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, DanishLowercase)
{
	std::string i = ReadRegular(271, 95);
	EXPECT_UTF8EQ("  Quizdeltagerne spiste jordb\xc3\xa6r med fl\xC3\xB8" "de, mens cirkusklovnen\n\
  Wolther spillede p\xC3\xA5 xylofon.", i.c_str());

	std::string el = ReadLowercase(271, 95);
	EXPECT_UTF8EQ("  quizdeltagerne spiste jordb\xc3\xa6r med fl\xC3\xB8" "de, mens cirkusklovnen\n\
  wolther spillede p\xC3\xA5 xylofon.", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  quizdeltagerne spiste jordb\xc3\xa6r med fl\xC3\xB8" "de, mens cirkusklovnen\n\
  wolther spillede p\xC3\xA5 xylofon.", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, DanishTitlecase)
{
	std::string i = ReadRegular(271, 95);
	EXPECT_UTF8EQ("  Quizdeltagerne spiste jordb\xc3\xa6r med fl\xC3\xB8" "de, mens cirkusklovnen\n\
  Wolther spillede p\xC3\xA5 xylofon.", i.c_str());

	std::string et = ReadTitlecase(271, 95);
	EXPECT_UTF8EQ("  Quizdeltagerne Spiste Jordb\xC3\xA6r Med Fl\xC3\xB8" "de, Mens Cirkusklovnen\n\
  Wolther Spillede P\xC3\xA5 Xylofon.", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  Quizdeltagerne Spiste Jordb\xC3\xA6r Med Fl\xC3\xB8" "de, Mens Cirkusklovnen\n\
  Wolther Spillede P\xC3\xA5 Xylofon.", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, GermanFirstUppercase)
{
	std::string i = ReadRegular(503, 64);
	EXPECT_UTF8EQ("  Falsches \xC3\x9C" "ben von Xylophonmusik qu\xC3\xA4lt jeden gr\xC3\xB6\xC3\x9F" "eren Zwerg", i.c_str());

	std::string eu = ReadUppercase(503, 64);
	EXPECT_UTF8EQ("  FALSCHES \xc3\x9c" "BEN VON XYLOPHONMUSIK QU\xc3\x84LT JEDEN GR\xC3\x96SSEREN ZWERG", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  FALSCHES \xC3\x9C" "BEN VON XYLOPHONMUSIK QU\xC3\x84LT JEDEN GR\xC3\x96SSEREN ZWERG", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, GermanFirstLowercase)
{
	std::string i = ReadRegular(503, 64);
	EXPECT_STREQ("  Falsches \xC3\x9C" "ben von Xylophonmusik qu\xC3\xA4lt jeden gr\xC3\xB6\xC3\x9F" "eren Zwerg", i.c_str());

	std::string el = ReadLowercase(503, 64);
	EXPECT_UTF8EQ("  falsches \xC3\xBC" "ben von xylophonmusik qu\xC3\xA4lt jeden gr\xC3\xB6\xC3\x9F" "eren zwerg", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  falsches \xC3\xBC" "ben von xylophonmusik qu\xC3\xA4lt jeden gr\xC3\xB6\xC3\x9F" "eren zwerg", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, GermanFirstTitlecase)
{
	std::string i = ReadRegular(503, 64);
	EXPECT_STREQ("  Falsches \xC3\x9C" "ben von Xylophonmusik qu\xC3\xA4lt jeden gr\xC3\xB6\xC3\x9F" "eren Zwerg", i.c_str());

	std::string et = ReadTitlecase(503, 64);
	EXPECT_UTF8EQ("  Falsches \xC3\x9C" "ben Von Xylophonmusik Qu\xC3\xA4lt Jeden Gr\xC3\xB6\xC3\x9F" "eren Zwerg", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  Falsches \xC3\x9C" "ben Von Xylophonmusik Qu\xC3\xA4lt Jeden Gr\xC3\xB6\xC3\x9F" "eren Zwerg", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, GermanSecondUppercase)
{
	std::string i = ReadRegular(642, 59);
	EXPECT_UTF8EQ("  Zw\xC3\xB6lf Boxk\xC3\xA4mpfer jagten Eva quer \xC3\xBC" "ber den Sylter Deich", i.c_str());

	std::string eu = ReadUppercase(642, 59);
	EXPECT_UTF8EQ("  ZW\xC3\x96LF BOXK\xC3\x84MPFER JAGTEN EVA QUER \xC3\x9C" "BER DEN SYLTER DEICH", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  ZW\xC3\x96LF BOXK\xC3\x84MPFER JAGTEN EVA QUER \xC3\x9C" "BER DEN SYLTER DEICH", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, GermanSecondLowercase)
{
	std::string i = ReadRegular(642, 59);
	EXPECT_UTF8EQ("  Zw\xC3\xB6lf Boxk\xC3\xA4mpfer jagten Eva quer \xC3\xBC" "ber den Sylter Deich", i.c_str());

	std::string el = ReadLowercase(642, 59);
	EXPECT_UTF8EQ("  zw\xC3\xB6lf boxk\xC3\xA4mpfer jagten eva quer \xC3\xBC" "ber den sylter deich", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  zw\xC3\xB6lf boxk\xC3\xA4mpfer jagten eva quer \xC3\xBC" "ber den sylter deich", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, GermanSecondTitlecase)
{
	std::string i = ReadRegular(642, 59);
	EXPECT_STREQ("  Zw\xC3\xB6lf Boxk\xC3\xA4mpfer jagten Eva quer \xC3\xBC" "ber den Sylter Deich", i.c_str());

	std::string et = ReadTitlecase(642, 59);
	EXPECT_UTF8EQ("  Zw\xC3\xB6lf Boxk\xC3\xA4mpfer Jagten Eva Quer \xC3\x9C" "ber Den Sylter Deich", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  Zw\xC3\xB6lf Boxk\xC3\xA4mpfer Jagten Eva Quer \xC3\x9C" "ber Den Sylter Deich", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, GermanThirdUppercase)
{
	std::string i = ReadRegular(767, 30);
	EXPECT_STREQ("  Heiz\xC3\xB6lr\xC3\xBC" "cksto\xC3\x9F" "abd\xC3\xA4mpfung", i.c_str());

	std::string eu = ReadUppercase(767, 30);
	EXPECT_UTF8EQ("  HEIZ\xC3\x96LR\xC3\x9C" "CKSTOSSABD\xC3\x84MPFUNG", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  HEIZ\xC3\x96LR\xC3\x9C" "CKSTOSSABD\xC3\x84MPFUNG", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, GermanThirdLowercase)
{
	std::string i = ReadRegular(767, 30);
	EXPECT_STREQ("  Heiz\xC3\xB6lr\xC3\xBC" "cksto\xC3\x9F" "abd\xC3\xA4mpfung", i.c_str());

	std::string el = ReadLowercase(767, 30);
	EXPECT_UTF8EQ("  heiz\xC3\xB6lr\xC3\xBC" "cksto\xC3\x9F" "abd\xC3\xA4mpfung", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  heiz\xC3\xB6lr\xC3\xBC" "cksto\xC3\x9F" "abd\xC3\xA4mpfung", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, GermanThirdTitlecase)
{
	std::string i = ReadRegular(767, 30);
	EXPECT_STREQ("  Heiz\xC3\xB6lr\xC3\xBC" "cksto\xC3\x9F" "abd\xC3\xA4mpfung", i.c_str());

	std::string et = ReadTitlecase(767, 30);
	EXPECT_UTF8EQ("  Heiz\xC3\xB6lr\xC3\xBC" "cksto\xC3\x9F" "abd\xC3\xA4mpfung", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  Heiz\xC3\xB6lr\xC3\xBC" "cksto\xC3\x9F" "abd\xC3\xA4mpfung", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, GreekFirstUppercase)
{
	std::string i = ReadRegular(911, 105);
	EXPECT_UTF8EQ("  \xCE\x93\xCE\xB1\xCE\xB6\xCE\xAD\xCE\xB5\xCF\x82 \xCE\xBA\xCE\xB1\xE1\xBD\xB6 \xCE\xBC\xCF\x85\xCF\x81\xCF\x84\xCE\xB9\xE1\xBD\xB2\xCF\x82 \xCE\xB4\xE1\xBD\xB2\xCE\xBD \xCE\xB8\xE1\xBD\xB0 \xCE\xB2\xCF\x81\xE1\xBF\xB6 \xCF\x80\xCE\xB9\xE1\xBD\xB0 \xCF\x83\xCF\x84\xE1\xBD\xB8 \xCF\x87\xCF\x81\xCF\x85\xCF\x83\xCE\xB1\xCF\x86\xE1\xBD\xB6 \xCE\xBE\xCE\xAD\xCF\x86\xCF\x89\xCF\x84\xCE\xBF", i.c_str());

	std::string eu = ReadUppercase(911, 106);
	EXPECT_UTF8EQ("  \xCE\x93\xCE\x91\xCE\x96\xCE\x88\xCE\x95\xCE\xA3 \xCE\x9A\xCE\x91\xE1\xBF\x9A \xCE\x9C\xCE\xA5\xCE\xA1\xCE\xA4\xCE\x99\xE1\xBF\x88\xCE\xA3 \xCE\x94\xE1\xBF\x88\xCE\x9D \xCE\x98\xE1\xBE\xBA \xCE\x92\xCE\xA1\xCE\xA9\xCD\x82 \xCE\xA0\xCE\x99\xE1\xBE\xBA \xCE\xA3\xCE\xA4\xE1\xBF\xB8 \xCE\xA7\xCE\xA1\xCE\xA5\xCE\xA3\xCE\x91\xCE\xA6\xE1\xBF\x9A \xCE\x9E\xCE\x88\xCE\xA6\xCE\xA9\xCE\xA4\xCE\x9F", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  \xCE\x93\xCE\x91\xCE\x96\xCE\x88\xCE\x95\xCE\xA3 \xCE\x9A\xCE\x91\xE1\xBF\x9A \xCE\x9C\xCE\xA5\xCE\xA1\xCE\xA4\xCE\x99\xE1\xBF\x88\xCE\xA3 \xCE\x94\xE1\xBF\x88\xCE\x9D \xCE\x98\xE1\xBE\xBA \xCE\x92\xCE\xA1\xCE\xA9\xCD\x82 \xCE\xA0\xCE\x99\xE1\xBE\xBA \xCE\xA3\xCE\xA4\xE1\xBF\xB8 \xCE\xA7\xCE\xA1\xCE\xA5\xCE\xA3\xCE\x91\xCE\xA6\xE1\xBF\x9A \xCE\x9E\xCE\x88\xCE\xA6\xCE\xA9\xCE\xA4\xCE\x9F", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, GreekFirstLowercase)
{
	std::string i = ReadRegular(911, 105);
	EXPECT_UTF8EQ("  \xCE\x93\xCE\xB1\xCE\xB6\xCE\xAD\xCE\xB5\xCF\x82 \xCE\xBA\xCE\xB1\xE1\xBD\xB6 \xCE\xBC\xCF\x85\xCF\x81\xCF\x84\xCE\xB9\xE1\xBD\xB2\xCF\x82 \xCE\xB4\xE1\xBD\xB2\xCE\xBD \xCE\xB8\xE1\xBD\xB0 \xCE\xB2\xCF\x81\xE1\xBF\xB6 \xCF\x80\xCE\xB9\xE1\xBD\xB0 \xCF\x83\xCF\x84\xE1\xBD\xB8 \xCF\x87\xCF\x81\xCF\x85\xCF\x83\xCE\xB1\xCF\x86\xE1\xBD\xB6 \xCE\xBE\xCE\xAD\xCF\x86\xCF\x89\xCF\x84\xCE\xBF", i.c_str());

	std::string el = ReadLowercase(911, 105);
	EXPECT_UTF8EQ("  \xCE\xB3\xCE\xB1\xCE\xB6\xCE\xAD\xCE\xB5\xCF\x82 \xCE\xBA\xCE\xB1\xE1\xBD\xB6 \xCE\xBC\xCF\x85\xCF\x81\xCF\x84\xCE\xB9\xE1\xBD\xB2\xCF\x82 \xCE\xB4\xE1\xBD\xB2\xCE\xBD \xCE\xB8\xE1\xBD\xB0 \xCE\xB2\xCF\x81\xE1\xBF\xB6 \xCF\x80\xCE\xB9\xE1\xBD\xB0 \xCF\x83\xCF\x84\xE1\xBD\xB8 \xCF\x87\xCF\x81\xCF\x85\xCF\x83\xCE\xB1\xCF\x86\xE1\xBD\xB6 \xCE\xBE\xCE\xAD\xCF\x86\xCF\x89\xCF\x84\xCE\xBF", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  \xCE\xB3\xCE\xB1\xCE\xB6\xCE\xAD\xCE\xB5\xCF\x82 \xCE\xBA\xCE\xB1\xE1\xBD\xB6 \xCE\xBC\xCF\x85\xCF\x81\xCF\x84\xCE\xB9\xE1\xBD\xB2\xCF\x82 \xCE\xB4\xE1\xBD\xB2\xCE\xBD \xCE\xB8\xE1\xBD\xB0 \xCE\xB2\xCF\x81\xE1\xBF\xB6 \xCF\x80\xCE\xB9\xE1\xBD\xB0 \xCF\x83\xCF\x84\xE1\xBD\xB8 \xCF\x87\xCF\x81\xCF\x85\xCF\x83\xCE\xB1\xCF\x86\xE1\xBD\xB6 \xCE\xBE\xCE\xAD\xCF\x86\xCF\x89\xCF\x84\xCE\xBF", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, GreekFirstTitlecase)
{
	std::string i = ReadRegular(911, 105);
	EXPECT_STREQ("  \xCE\x93\xCE\xB1\xCE\xB6\xCE\xAD\xCE\xB5\xCF\x82 \xCE\xBA\xCE\xB1\xE1\xBD\xB6 \xCE\xBC\xCF\x85\xCF\x81\xCF\x84\xCE\xB9\xE1\xBD\xB2\xCF\x82 \xCE\xB4\xE1\xBD\xB2\xCE\xBD \xCE\xB8\xE1\xBD\xB0 \xCE\xB2\xCF\x81\xE1\xBF\xB6 \xCF\x80\xCE\xB9\xE1\xBD\xB0 \xCF\x83\xCF\x84\xE1\xBD\xB8 \xCF\x87\xCF\x81\xCF\x85\xCF\x83\xCE\xB1\xCF\x86\xE1\xBD\xB6 \xCE\xBE\xCE\xAD\xCF\x86\xCF\x89\xCF\x84\xCE\xBF", i.c_str());

	std::string et = ReadTitlecase(911, 105);
	EXPECT_UTF8EQ("  \xCE\x93\xCE\xB1\xCE\xB6\xCE\xAD\xCE\xB5\xCF\x82 \xCE\x9A\xCE\xB1\xE1\xBD\xB6 \xCE\x9C\xCF\x85\xCF\x81\xCF\x84\xCE\xB9\xE1\xBD\xB2\xCF\x82 \xCE\x94\xE1\xBD\xB2\xCE\xBD \xCE\x98\xE1\xBD\xB0 \xCE\x92\xCF\x81\xE1\xBF\xB6 \xCE\xA0\xCE\xB9\xE1\xBD\xB0 \xCE\xA3\xCF\x84\xE1\xBD\xB8 \xCE\xA7\xCF\x81\xCF\x85\xCF\x83\xCE\xB1\xCF\x86\xE1\xBD\xB6 \xCE\x9E\xCE\xAD\xCF\x86\xCF\x89\xCF\x84\xCE\xBF", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  \xCE\x93\xCE\xB1\xCE\xB6\xCE\xAD\xCE\xB5\xCF\x82 \xCE\x9A\xCE\xB1\xE1\xBD\xB6 \xCE\x9C\xCF\x85\xCF\x81\xCF\x84\xCE\xB9\xE1\xBD\xB2\xCF\x82 \xCE\x94\xE1\xBD\xB2\xCE\xBD \xCE\x98\xE1\xBD\xB0 \xCE\x92\xCF\x81\xE1\xBF\xB6 \xCE\xA0\xCE\xB9\xE1\xBD\xB0 \xCE\xA3\xCF\x84\xE1\xBD\xB8 \xCE\xA7\xCF\x81\xCF\x85\xCF\x83\xCE\xB1\xCF\x86\xE1\xBD\xB6 \xCE\x9E\xCE\xAD\xCF\x86\xCF\x89\xCF\x84\xCE\xBF", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, GreekSecondUppercase)
{
	std::string i = ReadRegular(1086, 66);
	EXPECT_UTF8EQ("  \xCE\x9E\xCE\xB5\xCF\x83\xCE\xBA\xCE\xB5\xCF\x80\xCE\xAC\xCE\xB6\xCF\x89 \xCF\x84\xE1\xBD\xB4\xCE\xBD \xCF\x88\xCF\x85\xCF\x87\xCE\xBF\xCF\x86\xCE\xB8\xCF\x8C\xCF\x81\xCE\xB1 \xCE\xB2\xCE\xB4\xCE\xB5\xCE\xBB\xCF\x85\xCE\xB3\xCE\xBC\xCE\xAF\xCE\xB1", i.c_str());

	std::string eu = ReadUppercase(1087, 66);
	EXPECT_UTF8EQ("  \xCE\x9E\xCE\x95\xCE\xA3\xCE\x9A\xCE\x95\xCE\xA0\xCE\x86\xCE\x96\xCE\xA9 \xCE\xA4\xE1\xBF\x8A\xCE\x9D \xCE\xA8\xCE\xA5\xCE\xA7\xCE\x9F\xCE\xA6\xCE\x98\xCE\x8C\xCE\xA1\xCE\x91 \xCE\x92\xCE\x94\xCE\x95\xCE\x9B\xCE\xA5\xCE\x93\xCE\x9C\xCE\x8A\xCE\x91", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  \xCE\x9E\xCE\x95\xCE\xA3\xCE\x9A\xCE\x95\xCE\xA0\xCE\x86\xCE\x96\xCE\xA9 \xCE\xA4\xE1\xBF\x8A\xCE\x9D \xCE\xA8\xCE\xA5\xCE\xA7\xCE\x9F\xCE\xA6\xCE\x98\xCE\x8C\xCE\xA1\xCE\x91 \xCE\x92\xCE\x94\xCE\x95\xCE\x9B\xCE\xA5\xCE\x93\xCE\x9C\xCE\x8A\xCE\x91", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, GreekSecondLowercase)
{
	std::string i = ReadRegular(1086, 66);
	EXPECT_UTF8EQ("  \xCE\x9E\xCE\xB5\xCF\x83\xCE\xBA\xCE\xB5\xCF\x80\xCE\xAC\xCE\xB6\xCF\x89 \xCF\x84\xE1\xBD\xB4\xCE\xBD \xCF\x88\xCF\x85\xCF\x87\xCE\xBF\xCF\x86\xCE\xB8\xCF\x8C\xCF\x81\xCE\xB1 \xCE\xB2\xCE\xB4\xCE\xB5\xCE\xBB\xCF\x85\xCE\xB3\xCE\xBC\xCE\xAF\xCE\xB1", i.c_str());

	std::string el = ReadLowercase(1086, 66);
	EXPECT_UTF8EQ("  \xCE\xBE\xCE\xB5\xCF\x83\xCE\xBA\xCE\xB5\xCF\x80\xCE\xAC\xCE\xB6\xCF\x89 \xCF\x84\xE1\xBD\xB4\xCE\xBD \xCF\x88\xCF\x85\xCF\x87\xCE\xBF\xCF\x86\xCE\xB8\xCF\x8C\xCF\x81\xCE\xB1 \xCE\xB2\xCE\xB4\xCE\xB5\xCE\xBB\xCF\x85\xCE\xB3\xCE\xBC\xCE\xAF\xCE\xB1", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  \xCE\xBE\xCE\xB5\xCF\x83\xCE\xBA\xCE\xB5\xCF\x80\xCE\xAC\xCE\xB6\xCF\x89 \xCF\x84\xE1\xBD\xB4\xCE\xBD \xCF\x88\xCF\x85\xCF\x87\xCE\xBF\xCF\x86\xCE\xB8\xCF\x8C\xCF\x81\xCE\xB1 \xCE\xB2\xCE\xB4\xCE\xB5\xCE\xBB\xCF\x85\xCE\xB3\xCE\xBC\xCE\xAF\xCE\xB1", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, GreekSecondTitlecase)
{
	std::string i = ReadRegular(1086, 66);
	EXPECT_STREQ("  \xCE\x9E\xCE\xB5\xCF\x83\xCE\xBA\xCE\xB5\xCF\x80\xCE\xAC\xCE\xB6\xCF\x89 \xCF\x84\xE1\xBD\xB4\xCE\xBD \xCF\x88\xCF\x85\xCF\x87\xCE\xBF\xCF\x86\xCE\xB8\xCF\x8C\xCF\x81\xCE\xB1 \xCE\xB2\xCE\xB4\xCE\xB5\xCE\xBB\xCF\x85\xCE\xB3\xCE\xBC\xCE\xAF\xCE\xB1", i.c_str());

	std::string et = ReadTitlecase(1086, 66);
	EXPECT_UTF8EQ("  \xCE\x9E\xCE\xB5\xCF\x83\xCE\xBA\xCE\xB5\xCF\x80\xCE\xAC\xCE\xB6\xCF\x89 \xCE\xA4\xE1\xBD\xB4\xCE\xBD \xCE\xA8\xCF\x85\xCF\x87\xCE\xBF\xCF\x86\xCE\xB8\xCF\x8C\xCF\x81\xCE\xB1 \xCE\x92\xCE\xB4\xCE\xB5\xCE\xBB\xCF\x85\xCE\xB3\xCE\xBC\xCE\xAF\xCE\xB1", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  \xCE\x9E\xCE\xB5\xCF\x83\xCE\xBA\xCE\xB5\xCF\x80\xCE\xAC\xCE\xB6\xCF\x89 \xCE\xA4\xE1\xBD\xB4\xCE\xBD \xCE\xA8\xCF\x85\xCF\x87\xCE\xBF\xCF\x86\xCE\xB8\xCF\x8C\xCF\x81\xCE\xB1 \xCE\x92\xCE\xB4\xCE\xB5\xCE\xBB\xCF\x85\xCE\xB3\xCE\xBC\xCE\xAF\xCE\xB1", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, GreekThirdUppercase)
{
	std::string i = ReadRegular(1201, 84);
	EXPECT_UTF8EQ("  \xCE\x96\xCE\xB1\xCF\x86\xCE\xB5\xCE\xAF\xCF\x81\xCE\xB9 \xCE\xB4\xCE\xAD\xCE\xBE\xCE\xBF\xCF\x85 \xCF\x80\xCE\xAC\xCE\xB3\xCE\xBA\xCE\xB1\xCE\xBB\xCE\xBF, \xCE\xB2\xCE\xB1\xCE\xB8\xE1\xBF\xB6\xCE\xBD \xCF\x88\xCF\x85\xCF\x87\xE1\xBF\x86\xCF\x82 \xCF\x84\xE1\xBD\xB8 \xCF\x83\xE1\xBF\x86\xCE\xBC\xCE\xB1.", i.c_str());

	std::string eu = ReadUppercase(1202, 87);
	EXPECT_UTF8EQ("  \xCE\x96\xCE\x91\xCE\xA6\xCE\x95\xCE\x8A\xCE\xA1\xCE\x99 \xCE\x94\xCE\x88\xCE\x9E\xCE\x9F\xCE\xA5 \xCE\xA0\xCE\x86\xCE\x93\xCE\x9A\xCE\x91\xCE\x9B\xCE\x9F, \xCE\x92\xCE\x91\xCE\x98\xCE\xA9\xCD\x82\xCE\x9D \xCE\xA8\xCE\xA5\xCE\xA7\xCE\x97\xCD\x82\xCE\xA3 \xCE\xA4\xE1\xBF\xB8 \xCE\xA3\xCE\x97\xCD\x82\xCE\x9C\xCE\x91.", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  \xCE\x96\xCE\x91\xCE\xA6\xCE\x95\xCE\x8A\xCE\xA1\xCE\x99 \xCE\x94\xCE\x88\xCE\x9E\xCE\x9F\xCE\xA5 \xCE\xA0\xCE\x86\xCE\x93\xCE\x9A\xCE\x91\xCE\x9B\xCE\x9F, \xCE\x92\xCE\x91\xCE\x98\xCE\xA9\xCD\x82\xCE\x9D \xCE\xA8\xCE\xA5\xCE\xA7\xCE\x97\xCD\x82\xCE\xA3 \xCE\xA4\xE1\xBF\xB8 \xCE\xA3\xCE\x97\xCD\x82\xCE\x9C\xCE\x91.", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, EnglishUppercase)
{
	std::string i = ReadRegular(1379, 45);
	EXPECT_UTF8EQ("  The quick brown fox jumps over the lazy dog", i.c_str());

	std::string eu = ReadUppercase(1383, 45);
	EXPECT_UTF8EQ("  THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, EnglishLowercase)
{
	std::string i = ReadRegular(1379, 45);
	EXPECT_UTF8EQ("  The quick brown fox jumps over the lazy dog", i.c_str());

	std::string el = ReadLowercase(1379, 45);
	EXPECT_UTF8EQ("  the quick brown fox jumps over the lazy dog", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  the quick brown fox jumps over the lazy dog", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, EnglishTitlecase)
{
	std::string i = ReadRegular(1379, 45);
	EXPECT_STREQ("  The quick brown fox jumps over the lazy dog", i.c_str());

	std::string et = ReadTitlecase(1379, 45);
	EXPECT_UTF8EQ("  The Quick Brown Fox Jumps Over The Lazy Dog", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  The Quick Brown Fox Jumps Over The Lazy Dog", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, SpanishUppercase)
{
	std::string i = ReadRegular(1453, 108);
	EXPECT_UTF8EQ("  El ping\xC3\xBCino Wenceslao hizo kil\xC3\xB3metros bajo exhaustiva lluvia y \n\
  fr\xC3\xADo, a\xC3\xB1oraba a su querido cachorro.", i.c_str());

	std::string eu = ReadUppercase(1457, 108);
	EXPECT_UTF8EQ("  EL PING\xC3\x9CINO WENCESLAO HIZO KIL\xC3\x93METROS BAJO EXHAUSTIVA LLUVIA Y \n\
  FR\xC3\x8DO, A\xC3\x91ORABA A SU QUERIDO CACHORRO.", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  EL PING\xC3\x9CINO WENCESLAO HIZO KIL\xC3\x93METROS BAJO EXHAUSTIVA LLUVIA Y \n\
  FR\xC3\x8DO, A\xC3\x91ORABA A SU QUERIDO CACHORRO.", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, SpanishLowercase)
{
	std::string i = ReadRegular(1453, 108);
	EXPECT_UTF8EQ("  El ping\xC3\xBCino Wenceslao hizo kil\xC3\xB3metros bajo exhaustiva lluvia y \n\
  fr\xC3\xADo, a\xC3\xB1oraba a su querido cachorro.", i.c_str());

	std::string el = ReadLowercase(1453, 108);
	EXPECT_UTF8EQ("  el ping\xC3\xBCino wenceslao hizo kil\xC3\xB3metros bajo exhaustiva lluvia y \n\
  fr\xC3\xADo, a\xC3\xB1oraba a su querido cachorro.", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  el ping\xC3\xBCino wenceslao hizo kil\xC3\xB3metros bajo exhaustiva lluvia y \n\
  fr\xC3\xADo, a\xC3\xB1oraba a su querido cachorro.", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, SpanishTitlecase)
{
	std::string i = ReadRegular(1453, 108);
	EXPECT_UTF8EQ("  El ping\xC3\xBCino Wenceslao hizo kil\xC3\xB3metros bajo exhaustiva lluvia y \n\
  fr\xC3\xADo, a\xC3\xB1oraba a su querido cachorro.", i.c_str());

	std::string et = ReadTitlecase(1453, 108);
	EXPECT_UTF8EQ("  El Ping\xC3\xBCino Wenceslao Hizo Kil\xC3\xB3metros Bajo Exhaustiva Lluvia Y \n\
  Fr\xC3\xADo, A\xC3\xB1oraba A Su Querido Cachorro.", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  El Ping\xC3\xBCino Wenceslao Hizo Kil\xC3\xB3metros Bajo Exhaustiva Lluvia Y \n\
  Fr\xC3\xADo, A\xC3\xB1oraba A Su Querido Cachorro.", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, FrenchFirstUppercase)
{
	std::string i = ReadRegular(1678, 361);
	EXPECT_UTF8EQ("  Portez ce vieux whisky au juge blond qui fume sur son \xC3\xAEle int\xC3\xA9rieure, \xC3\xA0\n\
  c\xC3\xB4t\xC3\xA9 de l'alc\xC3\xB4ve ovo\xC3\xAF" "de, o\xC3\xB9 les b\xC3\xBB" "ches se consument dans l'\xC3\xA2tre, ce\n\
  qui lui permet de penser \xC3\xA0 la c\xC3\xA6nogen\xC3\xA8se de l'\xC3\xAAtre dont il est question\n\
  dans la cause ambigu\xC3\xAB entendue \xC3\xA0 Mo\xC3\xBF, dans un capharna\xC3\xBCm qui,\n\
  pense-t-il, diminue \xC3\xA7\xC3\xA0 et l\xC3\xA0 la qualit\xC3\xA9 de son \xC5\x93uvre. ", i.c_str());

	std::string eu = ReadUppercase(1682, 361);
	EXPECT_UTF8EQ("  PORTEZ CE VIEUX WHISKY AU JUGE BLOND QUI FUME SUR SON \xC3\x8ELE INT\xC3\x89RIEURE, \xC3\x80\n\
  C\xC3\x94T\xC3\x89 DE L'ALC\xC3\x94VE OVO\xC3\x8F" "DE, O\xC3\x99 LES B\xC3\x9B" "CHES SE CONSUMENT DANS L'\xC3\x82TRE, CE\n\
  QUI LUI PERMET DE PENSER \xC3\x80 LA C\xC3\x86NOGEN\xC3\x88SE DE L'\xC3\x8ATRE DONT IL EST QUESTION\n\
  DANS LA CAUSE AMBIGU\xC3\x8B ENTENDUE \xC3\x80 MO\xC5\xB8, DANS UN CAPHARNA\xC3\x9CM QUI,\n\
  PENSE-T-IL, DIMINUE \xC3\x87\xC3\x80 ET L\xC3\x80 LA QUALIT\xC3\x89 DE SON \xC5\x92UVRE. ", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  PORTEZ CE VIEUX WHISKY AU JUGE BLOND QUI FUME SUR SON \xC3\x8ELE INT\xC3\x89RIEURE, \xC3\x80\n\
  C\xC3\x94T\xC3\x89 DE L'ALC\xC3\x94VE OVO\xC3\x8F" "DE, O\xC3\x99 LES B\xC3\x9B" "CHES SE CONSUMENT DANS L'\xC3\x82TRE, CE\n\
  QUI LUI PERMET DE PENSER \xC3\x80 LA C\xC3\x86NOGEN\xC3\x88SE DE L'\xC3\x8ATRE DONT IL EST QUESTION\n\
  DANS LA CAUSE AMBIGU\xC3\x8B ENTENDUE \xC3\x80 MO\xC5\xB8, DANS UN CAPHARNA\xC3\x9CM QUI,\n\
  PENSE-T-IL, DIMINUE \xC3\x87\xC3\x80 ET L\xC3\x80 LA QUALIT\xC3\x89 DE SON \xC5\x92UVRE. ", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, FrenchFirstLowercase)
{
	std::string i = ReadRegular(1678, 361);
	EXPECT_UTF8EQ("  Portez ce vieux whisky au juge blond qui fume sur son \xC3\xAEle int\xC3\xA9rieure, \xC3\xA0\n\
  c\xC3\xB4t\xC3\xA9 de l'alc\xC3\xB4ve ovo\xC3\xAF" "de, o\xC3\xB9 les b\xC3\xBB" "ches se consument dans l'\xC3\xA2tre, ce\n\
  qui lui permet de penser \xC3\xA0 la c\xC3\xA6nogen\xC3\xA8se de l'\xC3\xAAtre dont il est question\n\
  dans la cause ambigu\xC3\xAB entendue \xC3\xA0 Mo\xC3\xBF, dans un capharna\xC3\xBCm qui,\n\
  pense-t-il, diminue \xC3\xA7\xC3\xA0 et l\xC3\xA0 la qualit\xC3\xA9 de son \xC5\x93uvre. ", i.c_str());

	std::string el = ReadLowercase(1678, 361);
	EXPECT_UTF8EQ("  portez ce vieux whisky au juge blond qui fume sur son \xC3\xAEle int\xC3\xA9rieure, \xC3\xA0\n\
  c\xC3\xB4t\xC3\xA9 de l'alc\xC3\xB4ve ovo\xC3\xAF" "de, o\xC3\xB9 les b\xC3\xBB" "ches se consument dans l'\xC3\xA2tre, ce\n\
  qui lui permet de penser \xC3\xA0 la c\xC3\xA6nogen\xC3\xA8se de l'\xC3\xAAtre dont il est question\n\
  dans la cause ambigu\xC3\xAB entendue \xC3\xA0 mo\xC3\xBF, dans un capharna\xC3\xBCm qui,\n\
  pense-t-il, diminue \xC3\xA7\xC3\xA0 et l\xC3\xA0 la qualit\xC3\xA9 de son \xC5\x93uvre. ", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  portez ce vieux whisky au juge blond qui fume sur son \xC3\xAEle int\xC3\xA9rieure, \xC3\xA0\n\
  c\xC3\xB4t\xC3\xA9 de l'alc\xC3\xB4ve ovo\xC3\xAF" "de, o\xC3\xB9 les b\xC3\xBB" "ches se consument dans l'\xC3\xA2tre, ce\n\
  qui lui permet de penser \xC3\xA0 la c\xC3\xA6nogen\xC3\xA8se de l'\xC3\xAAtre dont il est question\n\
  dans la cause ambigu\xC3\xAB entendue \xC3\xA0 mo\xC3\xBF, dans un capharna\xC3\xBCm qui,\n\
  pense-t-il, diminue \xC3\xA7\xC3\xA0 et l\xC3\xA0 la qualit\xC3\xA9 de son \xC5\x93uvre. ", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, FrenchFirstTitlecase)
{
	std::string i = ReadRegular(1678, 361);
	EXPECT_UTF8EQ("  Portez ce vieux whisky au juge blond qui fume sur son \xC3\xAEle int\xC3\xA9rieure, \xC3\xA0\n\
  c\xC3\xB4t\xC3\xA9 de l'alc\xC3\xB4ve ovo\xC3\xAF" "de, o\xC3\xB9 les b\xC3\xBB" "ches se consument dans l'\xC3\xA2tre, ce\n\
  qui lui permet de penser \xC3\xA0 la c\xC3\xA6nogen\xC3\xA8se de l'\xC3\xAAtre dont il est question\n\
  dans la cause ambigu\xC3\xAB entendue \xC3\xA0 Mo\xC3\xBF, dans un capharna\xC3\xBCm qui,\n\
  pense-t-il, diminue \xC3\xA7\xC3\xA0 et l\xC3\xA0 la qualit\xC3\xA9 de son \xC5\x93uvre. ", i.c_str());

	std::string et = ReadTitlecase(1678, 361);
	EXPECT_UTF8EQ("  Portez Ce Vieux Whisky Au Juge Blond Qui Fume Sur Son \xC3\x8Ele Int\xC3\xA9rieure, \xC3\x80\n\
  C\xC3\xB4t\xC3\xA9 De L'Alc\xC3\xB4ve Ovo\xC3\xAF" "de, O\xC3\xB9 Les B\xC3\xBB" "ches Se Consument Dans L'\xC3\x82tre, Ce\n\
  Qui Lui Permet De Penser \xC3\x80 La C\xC3\xA6nogen\xC3\xA8se De L'\xC3\x8Atre Dont Il Est Question\n\
  Dans La Cause Ambigu\xC3\xAB Entendue \xC3\x80 Mo\xC3\xBF, Dans Un Capharna\xC3\xBCm Qui,\n\
  Pense-T-Il, Diminue \xC3\x87\xC3\xA0 Et L\xC3\xA0 La Qualit\xC3\xA9 De Son \xC5\x92uvre. ", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  Portez Ce Vieux Whisky Au Juge Blond Qui Fume Sur Son \xC3\x8Ele Int\xC3\xA9rieure, \xC3\x80\n\
  C\xC3\xB4t\xC3\xA9 De L'Alc\xC3\xB4ve Ovo\xC3\xAF" "de, O\xC3\xB9 Les B\xC3\xBB" "ches Se Consument Dans L'\xC3\x82tre, Ce\n\
  Qui Lui Permet De Penser \xC3\x80 La C\xC3\xA6nogen\xC3\xA8se De L'\xC3\x8Atre Dont Il Est Question\n\
  Dans La Cause Ambigu\xC3\xAB Entendue \xC3\x80 Mo\xC3\xBF, Dans Un Capharna\xC3\xBCm Qui,\n\
  Pense-T-Il, Diminue \xC3\x87\xC3\xA0 Et L\xC3\xA0 La Qualit\xC3\xA9 De Son \xC5\x92uvre. ", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, FrenchSecondUppercase)
{
	std::string i = ReadRegular(2041, 117);
	EXPECT_UTF8EQ("  l'\xC3\xAEle exigu\xC3\xAB\n  O\xC3\xB9 l'ob\xC3\xA8se jury m\xC3\xBBr\n\
  F\xC3\xAAte l'ha\xC3\xAF volap\xC3\xBCk,\n\
  \xC3\x82ne ex a\xC3\xA9quo au whist,\n\
  \xC3\x94tez ce v\xC5\x93u d\xC3\xA9\xC3\xA7u.", i.c_str());

	std::string eu = ReadUppercase(2045, 117);
	EXPECT_UTF8EQ("  L'\xC3\x8ELE EXIGU\xC3\x8B\n  O\xC3\x99 L'OB\xC3\x88SE JURY M\xC3\x9BR\n\
  F\xC3\x8ATE L'HA\xC3\x8F VOLAP\xC3\x9CK,\n\
  \xC3\x82NE EX A\xC3\x89QUO AU WHIST,\n\
  \xC3\x94TEZ CE V\xC5\x92U D\xC3\x89\xC3\x87U.", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  L'\xC3\x8ELE EXIGU\xC3\x8B\n\
  O\xC3\x99 L'OB\xC3\x88SE JURY M\xC3\x9BR\n\
  F\xC3\x8ATE L'HA\xC3\x8F VOLAP\xC3\x9CK,\n\
  \xC3\x82NE EX A\xC3\x89QUO AU WHIST,\n\
  \xC3\x94TEZ CE V\xC5\x92U D\xC3\x89\xC3\x87U.", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, FrenchSecondLowercase)
{
	std::string i = ReadRegular(2041, 117);
	EXPECT_UTF8EQ("  l'\xC3\xAEle exigu\xC3\xAB\n\
  O\xC3\xB9 l'ob\xC3\xA8se jury m\xC3\xBBr\n\
  F\xC3\xAAte l'ha\xC3\xAF volap\xC3\xBCk,\n\
  \xC3\x82ne ex a\xC3\xA9quo au whist,\n\
  \xC3\x94tez ce v\xC5\x93u d\xC3\xA9\xC3\xA7u.", i.c_str());

	std::string el = ReadLowercase(2041, 117);
	EXPECT_UTF8EQ("  l'\xC3\xAEle exigu\xC3\xAB\n\
  o\xC3\xB9 l'ob\xC3\xA8se jury m\xC3\xBBr\n\
  f\xC3\xAAte l'ha\xC3\xAF volap\xC3\xBCk,\n\
  \xC3\xA2ne ex a\xC3\xA9quo au whist,\n\
  \xC3\xB4tez ce v\xC5\x93u d\xC3\xA9\xC3\xA7u.", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  l'\xC3\xAEle exigu\xC3\xAB\n\
  o\xC3\xB9 l'ob\xC3\xA8se jury m\xC3\xBBr\n\
  f\xC3\xAAte l'ha\xC3\xAF volap\xC3\xBCk,\n\
  \xC3\xA2ne ex a\xC3\xA9quo au whist,\n\
  \xC3\xB4tez ce v\xC5\x93u d\xC3\xA9\xC3\xA7u.", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, FrenchSecondTitlecase)
{
	std::string i = ReadRegular(2041, 117);
	EXPECT_UTF8EQ("  l'\xC3\xAEle exigu\xC3\xAB\n\
  O\xC3\xB9 l'ob\xC3\xA8se jury m\xC3\xBBr\n\
  F\xC3\xAAte l'ha\xC3\xAF volap\xC3\xBCk,\n\
  \xC3\x82ne ex a\xC3\xA9quo au whist,\n\
  \xC3\x94tez ce v\xC5\x93u d\xC3\xA9\xC3\xA7u.", i.c_str());

	std::string et = ReadTitlecase(2041, 117);
	EXPECT_UTF8EQ("  L'\xC3\x8Ele Exigu\xC3\xAB\n\
  O\xC3\xB9 L'Ob\xC3\xA8se Jury M\xC3\xBBr\n\
  F\xC3\xAAte L'Ha\xC3\xAF Volap\xC3\xBCk,\n\
  \xC3\x82ne Ex A\xC3\xA9quo Au Whist,\n\
  \xC3\x94tez Ce V\xC5\x93u D\xC3\xA9\xC3\xA7u.", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  L'\xC3\x8Ele Exigu\xC3\xAB\n\
  O\xC3\xB9 L'Ob\xC3\xA8se Jury M\xC3\xBBr\n\
  F\xC3\xAAte L'Ha\xC3\xAF Volap\xC3\xBCk,\n\
  \xC3\x82ne Ex A\xC3\xA9quo Au Whist,\n\
  \xC3\x94tez Ce V\xC5\x93u D\xC3\xA9\xC3\xA7u.", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, FrenchThirdUppercase)
{
	std::string i = ReadRegular(2160, 148);
	EXPECT_UTF8EQ("  Le c\xC5\x93ur d\xC3\xA9\xC3\xA7u mais l'\xC3\xA2me plut\xC3\xB4t na\xC3\xAFve, Lou\xC3\xBFs r\xC3\xAAva de crapa\xC3\xBCter en\n\
  cano\xC3\xAB au del\xC3\xA0 des \xC3\xAEles, pr\xC3\xA8s du m\xC3\xA4lstr\xC3\xB6m o\xC3\xB9 br\xC3\xBBlent les nov\xC3\xA6.", i.c_str());

	std::string eu = ReadUppercase(2164, 148);
	EXPECT_UTF8EQ("  LE C\xC5\x92UR D\xC3\x89\xC3\x87U MAIS L'\xC3\x82ME PLUT\xC3\x94T NA\xC3\x8FVE, LOU\xC5\xB8S R\xC3\x8AVA DE CRAPA\xC3\x9CTER EN\n\
  CANO\xC3\x8B AU DEL\xC3\x80 DES \xC3\x8ELES, PR\xC3\x88S DU M\xC3\x84LSTR\xC3\x96M O\xC3\x99 BR\xC3\x9BLENT LES NOV\xC3\x86.", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  LE C\xC5\x92UR D\xC3\x89\xC3\x87U MAIS L'\xC3\x82ME PLUT\xC3\x94T NA\xC3\x8FVE, LOU\xC5\xB8S R\xC3\x8AVA DE CRAPA\xC3\x9CTER EN\n\
  CANO\xC3\x8B AU DEL\xC3\x80 DES \xC3\x8ELES, PR\xC3\x88S DU M\xC3\x84LSTR\xC3\x96M O\xC3\x99 BR\xC3\x9BLENT LES NOV\xC3\x86.", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, FrenchThirdLowercase)
{
	std::string i = ReadRegular(2160, 148);
	EXPECT_UTF8EQ("  Le c\xC5\x93ur d\xC3\xA9\xC3\xA7u mais l'\xC3\xA2me plut\xC3\xB4t na\xC3\xAFve, Lou\xC3\xBFs r\xC3\xAAva de crapa\xC3\xBCter en\n\
  cano\xC3\xAB au del\xC3\xA0 des \xC3\xAEles, pr\xC3\xA8s du m\xC3\xA4lstr\xC3\xB6m o\xC3\xB9 br\xC3\xBBlent les nov\xC3\xA6.", i.c_str());

	std::string el = ReadLowercase(2160, 148);
	EXPECT_UTF8EQ("  le c\xC5\x93ur d\xC3\xA9\xC3\xA7u mais l'\xC3\xA2me plut\xC3\xB4t na\xC3\xAFve, lou\xC3\xBFs r\xC3\xAAva de crapa\xC3\xBCter en\n\
  cano\xC3\xAB au del\xC3\xA0 des \xC3\xAEles, pr\xC3\xA8s du m\xC3\xA4lstr\xC3\xB6m o\xC3\xB9 br\xC3\xBBlent les nov\xC3\xA6.", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  le c\xC5\x93ur d\xC3\xA9\xC3\xA7u mais l'\xC3\xA2me plut\xC3\xB4t na\xC3\xAFve, lou\xC3\xBFs r\xC3\xAAva de crapa\xC3\xBCter en\n\
  cano\xC3\xAB au del\xC3\xA0 des \xC3\xAEles, pr\xC3\xA8s du m\xC3\xA4lstr\xC3\xB6m o\xC3\xB9 br\xC3\xBBlent les nov\xC3\xA6.", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, FrenchThirdTitlecase)
{
	std::string i = ReadRegular(2160, 148);
	EXPECT_UTF8EQ("  Le c\xC5\x93ur d\xC3\xA9\xC3\xA7u mais l'\xC3\xA2me plut\xC3\xB4t na\xC3\xAFve, Lou\xC3\xBFs r\xC3\xAAva de crapa\xC3\xBCter en\n\
  cano\xC3\xAB au del\xC3\xA0 des \xC3\xAEles, pr\xC3\xA8s du m\xC3\xA4lstr\xC3\xB6m o\xC3\xB9 br\xC3\xBBlent les nov\xC3\xA6.", i.c_str());

	std::string et = ReadTitlecase(2160, 148);
	EXPECT_UTF8EQ("  Le C\xC5\x93ur D\xC3\xA9\xC3\xA7u Mais L'\xC3\x82me Plut\xC3\xB4t Na\xC3\xAFve, Lou\xC3\xBFs R\xC3\xAAva De Crapa\xC3\xBCter En\n\
  Cano\xC3\xAB Au Del\xC3\xA0 Des \xC3\x8Eles, Pr\xC3\xA8s Du M\xC3\xA4lstr\xC3\xB6m O\xC3\xB9 Br\xC3\xBBlent Les Nov\xC3\xA6.", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  Le C\xC5\x93ur D\xC3\xA9\xC3\xA7u Mais L'\xC3\x82me Plut\xC3\xB4t Na\xC3\xAFve, Lou\xC3\xBFs R\xC3\xAAva De Crapa\xC3\xBCter En\n\
  Cano\xC3\xAB Au Del\xC3\xA0 Des \xC3\x8Eles, Pr\xC3\xA8s Du M\xC3\xA4lstr\xC3\xB6m O\xC3\xB9 Br\xC3\xBBlent Les Nov\xC3\xA6.", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, IrishGaelicUppercase)
{
	std::string i = ReadRegular(2347, 76);
	EXPECT_UTF8EQ("  D'fhuascail \xC3\x8Dosa, \xC3\x9Armhac na h\xC3\x93ighe Beannaithe, p\xC3\xB3r \xC3\x89" "ava agus \xC3\x81" "dhaimh", i.c_str());

	std::string eu = ReadUppercase(2351, 76);
	EXPECT_UTF8EQ("  D'FHUASCAIL \xC3\x8DOSA, \xC3\x9ARMHAC NA H\xC3\x93IGHE BEANNAITHE, P\xC3\x93R \xC3\x89" "AVA AGUS \xC3\x81" "DHAIMH", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  D'FHUASCAIL \xC3\x8DOSA, \xC3\x9ARMHAC NA H\xC3\x93IGHE BEANNAITHE, P\xC3\x93R \xC3\x89" "AVA AGUS \xC3\x81" "DHAIMH", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, IrishGaelicLowercase)
{
	std::string i = ReadRegular(2347, 76);
	EXPECT_UTF8EQ("  D'fhuascail \xC3\x8Dosa, \xC3\x9Armhac na h\xC3\x93ighe Beannaithe, p\xC3\xB3r \xC3\x89" "ava agus \xC3\x81" "dhaimh", i.c_str());

	std::string el = ReadLowercase(2347, 76);
	EXPECT_UTF8EQ("  d'fhuascail \xC3\xADosa, \xC3\xBArmhac na h\xC3\xB3ighe beannaithe, p\xC3\xB3r \xC3\xA9" "ava agus \xC3\xA1" "dhaimh", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  d'fhuascail \xC3\xADosa, \xC3\xBArmhac na h\xC3\xB3ighe beannaithe, p\xC3\xB3r \xC3\xA9" "ava agus \xC3\xA1" "dhaimh", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, IrishGaelicTitlecase)
{
	std::string i = ReadRegular(2347, 76);
	EXPECT_UTF8EQ("  D'fhuascail \xC3\x8Dosa, \xC3\x9Armhac na h\xC3\x93ighe Beannaithe, p\xC3\xB3r \xC3\x89" "ava agus \xC3\x81" "dhaimh", i.c_str());

	std::string et = ReadTitlecase(2347, 76);
	EXPECT_UTF8EQ("  D'Fhuascail \xC3\x8Dosa, \xC3\x9Armhac Na H\xC3\xB3ighe Beannaithe, P\xC3\xB3r \xC3\x89" "ava Agus \xC3\x81" "dhaimh", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  D'Fhuascail \xC3\x8Dosa, \xC3\x9Armhac Na H\xC3\xB3ighe Beannaithe, P\xC3\xB3r \xC3\x89" "ava Agus \xC3\x81" "dhaimh", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, HungarianUppercase)
{
	std::string i = ReadRegular(2456, 33);
	EXPECT_UTF8EQ("  \xC3\x81rv\xC3\xADzt\xC5\xB1r\xC5\x91 t\xC3\xBCk\xC3\xB6rf\xC3\xBAr\xC3\xB3g\xC3\xA9p", i.c_str());

	std::string eu = ReadUppercase(2460, 33);
	EXPECT_UTF8EQ("  \xC3\x81RV\xC3\x8DZT\xC5\xB0R\xC5\x90 T\xC3\x9CK\xC3\x96RF\xC3\x9AR\xC3\x93G\xC3\x89P", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  \xC3\x81RV\xC3\x8DZT\xC5\xB0R\xC5\x90 T\xC3\x9CK\xC3\x96RF\xC3\x9AR\xC3\x93G\xC3\x89P", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, HungarianLowercase)
{
	std::string i = ReadRegular(2456, 33);
	EXPECT_UTF8EQ("  \xC3\x81rv\xC3\xADzt\xC5\xB1r\xC5\x91 t\xC3\xBCk\xC3\xB6rf\xC3\xBAr\xC3\xB3g\xC3\xA9p", i.c_str());

	std::string el = ReadLowercase(2456, 33);
	EXPECT_UTF8EQ("  \xC3\xA1rv\xC3\xADzt\xC5\xB1r\xC5\x91 t\xC3\xBCk\xC3\xB6rf\xC3\xBAr\xC3\xB3g\xC3\xA9p", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  \xC3\xA1rv\xC3\xADzt\xC5\xB1r\xC5\x91 t\xC3\xBCk\xC3\xB6rf\xC3\xBAr\xC3\xB3g\xC3\xA9p", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, HungarianTitlecase)
{
	std::string i = ReadRegular(2456, 33);
	EXPECT_UTF8EQ("  \xC3\x81rv\xC3\xADzt\xC5\xB1r\xC5\x91 t\xC3\xBCk\xC3\xB6rf\xC3\xBAr\xC3\xB3g\xC3\xA9p", i.c_str());

	std::string et = ReadTitlecase(2456, 33);
	EXPECT_UTF8EQ("  \xC3\x81rv\xC3\xADzt\xC5\xB1r\xC5\x91 T\xC3\xBCk\xC3\xB6rf\xC3\xBAr\xC3\xB3g\xC3\xA9p", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  \xC3\x81rv\xC3\xADzt\xC5\xB1r\xC5\x91 T\xC3\xBCk\xC3\xB6rf\xC3\xBAr\xC3\xB3g\xC3\xA9p", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, IcelandicFirstUppercase)
{
	std::string i = ReadRegular(2592, 63);
	EXPECT_UTF8EQ("  K\xC3\xA6mi n\xC3\xBD \xC3\xB6xi h\xC3\xA9r ykist \xC3\xBEj\xC3\xB3" "fum n\xC3\xBA b\xC3\xA6\xC3\xB0i v\xC3\xADl og \xC3\xA1" "drepa", i.c_str());

	std::string eu = ReadUppercase(2596, 63);
	EXPECT_UTF8EQ("  K\xC3\x86MI N\xC3\x9D \xC3\x96XI H\xC3\x89R YKIST \xC3\x9EJ\xC3\x93" "FUM N\xC3\x9A B\xC3\x86\xC3\x90I V\xC3\x8DL OG \xC3\x81" "DREPA", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  K\xC3\x86MI N\xC3\x9D \xC3\x96XI H\xC3\x89R YKIST \xC3\x9EJ\xC3\x93" "FUM N\xC3\x9A B\xC3\x86\xC3\x90I V\xC3\x8DL OG \xC3\x81" "DREPA", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, IcelandicFirstLowercase)
{
	std::string i = ReadRegular(2592, 63);
	EXPECT_UTF8EQ("  K\xC3\xA6mi n\xC3\xBD \xC3\xB6xi h\xC3\xA9r ykist \xC3\xBEj\xC3\xB3" "fum n\xC3\xBA b\xC3\xA6\xC3\xB0i v\xC3\xADl og \xC3\xA1" "drepa", i.c_str());

	std::string el = ReadLowercase(2592, 63);
	EXPECT_UTF8EQ("  k\xC3\xA6mi n\xC3\xBD \xC3\xB6xi h\xC3\xA9r ykist \xC3\xBEj\xC3\xB3" "fum n\xC3\xBA b\xC3\xA6\xC3\xB0i v\xC3\xADl og \xC3\xA1" "drepa", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  k\xC3\xA6mi n\xC3\xBD \xC3\xB6xi h\xC3\xA9r ykist \xC3\xBEj\xC3\xB3" "fum n\xC3\xBA b\xC3\xA6\xC3\xB0i v\xC3\xADl og \xC3\xA1" "drepa", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, IcelandicFirstTitlecase)
{
	std::string i = ReadRegular(2592, 63);
	EXPECT_UTF8EQ("  K\xC3\xA6mi n\xC3\xBD \xC3\xB6xi h\xC3\xA9r ykist \xC3\xBEj\xC3\xB3" "fum n\xC3\xBA b\xC3\xA6\xC3\xB0i v\xC3\xADl og \xC3\xA1" "drepa", i.c_str());

	std::string et = ReadTitlecase(2592, 63);
	EXPECT_UTF8EQ("  K\xC3\xA6mi N\xC3\xBD \xC3\x96xi H\xC3\xA9r Ykist \xC3\x9Ej\xC3\xB3" "fum N\xC3\xBA B\xC3\xA6\xC3\xB0i V\xC3\xADl Og \xC3\x81" "drepa", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  K\xC3\xA6mi N\xC3\xBD \xC3\x96xi H\xC3\xA9r Ykist \xC3\x9Ej\xC3\xB3" "fum N\xC3\xBA B\xC3\xA6\xC3\xB0i V\xC3\xADl Og \xC3\x81" "drepa", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, IcelandicSecondUppercase)
{
	std::string i = ReadRegular(2657, 46);
	EXPECT_UTF8EQ("  S\xC3\xA6v\xC3\xB6r gr\xC3\xA9t \xC3\xA1\xC3\xB0" "an \xC3\xBEv\xC3\xAD \xC3\xBAlpan var \xC3\xB3n\xC3\xBDt", i.c_str());

	std::string eu = ReadUppercase(2661, 46);
	EXPECT_UTF8EQ("  S\xC3\x86V\xC3\x96R GR\xC3\x89T \xC3\x81\xC3\x90" "AN \xC3\x9EV\xC3\x8D \xC3\x9ALPAN VAR \xC3\x93N\xC3\x9DT", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  S\xC3\x86V\xC3\x96R GR\xC3\x89T \xC3\x81\xC3\x90" "AN \xC3\x9EV\xC3\x8D \xC3\x9ALPAN VAR \xC3\x93N\xC3\x9DT", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, IcelandicSecondLowercase)
{
	std::string i = ReadRegular(2657, 46);
	EXPECT_UTF8EQ("  S\xC3\xA6v\xC3\xB6r gr\xC3\xA9t \xC3\xA1\xC3\xB0" "an \xC3\xBEv\xC3\xAD \xC3\xBAlpan var \xC3\xB3n\xC3\xBDt", i.c_str());

	std::string el = ReadLowercase(2657, 46);
	EXPECT_UTF8EQ("  s\xC3\xA6v\xC3\xB6r gr\xC3\xA9t \xC3\xA1\xC3\xB0" "an \xC3\xBEv\xC3\xAD \xC3\xBAlpan var \xC3\xB3n\xC3\xBDt", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  s\xC3\xA6v\xC3\xB6r gr\xC3\xA9t \xC3\xA1\xC3\xB0" "an \xC3\xBEv\xC3\xAD \xC3\xBAlpan var \xC3\xB3n\xC3\xBDt", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, IcelandicSecondTitlecase)
{
	std::string i = ReadRegular(2657, 46);
	EXPECT_UTF8EQ("  S\xC3\xA6v\xC3\xB6r gr\xC3\xA9t \xC3\xA1\xC3\xB0" "an \xC3\xBEv\xC3\xAD \xC3\xBAlpan var \xC3\xB3n\xC3\xBDt", i.c_str());

	std::string et = ReadTitlecase(2657, 46);
	EXPECT_UTF8EQ("  S\xC3\xA6v\xC3\xB6r Gr\xC3\xA9t \xC3\x81\xC3\xB0" "an \xC3\x9Ev\xC3\xAD \xC3\x9Alpan Var \xC3\x93n\xC3\xBDt", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  S\xC3\xA6v\xC3\xB6r Gr\xC3\xA9t \xC3\x81\xC3\xB0" "an \xC3\x9Ev\xC3\xAD \xC3\x9Alpan Var \xC3\x93n\xC3\xBDt", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, JapaneseFirstUppercase)
{
	std::string i = ReadRegular(2786, 152);
	EXPECT_UTF8EQ("  \xE3\x81\x84\xE3\x82\x8D\xE3\x81\xAF\xE3\x81\xAB\xE3\x81\xBB\xE3\x81\xB8\xE3\x81\xA8\xE3\x81\xA1\xE3\x82\x8A\xE3\x81\xAC\xE3\x82\x8B\xE3\x82\x92\n\
  \xE3\x82\x8F\xE3\x81\x8B\xE3\x82\x88\xE3\x81\x9F\xE3\x82\x8C\xE3\x81\x9D\xE3\x81\xA4\xE3\x81\xAD\xE3\x81\xAA\xE3\x82\x89\xE3\x82\x80\n\
  \xE3\x81\x86\xE3\x82\x90\xE3\x81\xAE\xE3\x81\x8A\xE3\x81\x8F\xE3\x82\x84\xE3\x81\xBE\xE3\x81\x91\xE3\x81\xB5\xE3\x81\x93\xE3\x81\x88\xE3\x81\xA6\n\
  \xE3\x81\x82\xE3\x81\x95\xE3\x81\x8D\xE3\x82\x86\xE3\x82\x81\xE3\x81\xBF\xE3\x81\x97\xE3\x82\x91\xE3\x81\xB2\xE3\x82\x82\xE3\x81\x9B\xE3\x81\x99", i.c_str());

	std::string eu = ReadUppercase(2790, 152);
	EXPECT_UTF8EQ("  \xE3\x81\x84\xE3\x82\x8D\xE3\x81\xAF\xE3\x81\xAB\xE3\x81\xBB\xE3\x81\xB8\xE3\x81\xA8\xE3\x81\xA1\xE3\x82\x8A\xE3\x81\xAC\xE3\x82\x8B\xE3\x82\x92\n\
  \xE3\x82\x8F\xE3\x81\x8B\xE3\x82\x88\xE3\x81\x9F\xE3\x82\x8C\xE3\x81\x9D\xE3\x81\xA4\xE3\x81\xAD\xE3\x81\xAA\xE3\x82\x89\xE3\x82\x80\n\
  \xE3\x81\x86\xE3\x82\x90\xE3\x81\xAE\xE3\x81\x8A\xE3\x81\x8F\xE3\x82\x84\xE3\x81\xBE\xE3\x81\x91\xE3\x81\xB5\xE3\x81\x93\xE3\x81\x88\xE3\x81\xA6\n\
  \xE3\x81\x82\xE3\x81\x95\xE3\x81\x8D\xE3\x82\x86\xE3\x82\x81\xE3\x81\xBF\xE3\x81\x97\xE3\x82\x91\xE3\x81\xB2\xE3\x82\x82\xE3\x81\x9B\xE3\x81\x99", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  \xE3\x81\x84\xE3\x82\x8D\xE3\x81\xAF\xE3\x81\xAB\xE3\x81\xBB\xE3\x81\xB8\xE3\x81\xA8\xE3\x81\xA1\xE3\x82\x8A\xE3\x81\xAC\xE3\x82\x8B\xE3\x82\x92\n\
  \xE3\x82\x8F\xE3\x81\x8B\xE3\x82\x88\xE3\x81\x9F\xE3\x82\x8C\xE3\x81\x9D\xE3\x81\xA4\xE3\x81\xAD\xE3\x81\xAA\xE3\x82\x89\xE3\x82\x80\n\
  \xE3\x81\x86\xE3\x82\x90\xE3\x81\xAE\xE3\x81\x8A\xE3\x81\x8F\xE3\x82\x84\xE3\x81\xBE\xE3\x81\x91\xE3\x81\xB5\xE3\x81\x93\xE3\x81\x88\xE3\x81\xA6\n\
  \xE3\x81\x82\xE3\x81\x95\xE3\x81\x8D\xE3\x82\x86\xE3\x82\x81\xE3\x81\xBF\xE3\x81\x97\xE3\x82\x91\xE3\x81\xB2\xE3\x82\x82\xE3\x81\x9B\xE3\x81\x99", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, JapaneseFirstLowercase)
{
	std::string i = ReadRegular(2786, 152);
	EXPECT_UTF8EQ("  \xE3\x81\x84\xE3\x82\x8D\xE3\x81\xAF\xE3\x81\xAB\xE3\x81\xBB\xE3\x81\xB8\xE3\x81\xA8\xE3\x81\xA1\xE3\x82\x8A\xE3\x81\xAC\xE3\x82\x8B\xE3\x82\x92\n\
  \xE3\x82\x8F\xE3\x81\x8B\xE3\x82\x88\xE3\x81\x9F\xE3\x82\x8C\xE3\x81\x9D\xE3\x81\xA4\xE3\x81\xAD\xE3\x81\xAA\xE3\x82\x89\xE3\x82\x80\n\
  \xE3\x81\x86\xE3\x82\x90\xE3\x81\xAE\xE3\x81\x8A\xE3\x81\x8F\xE3\x82\x84\xE3\x81\xBE\xE3\x81\x91\xE3\x81\xB5\xE3\x81\x93\xE3\x81\x88\xE3\x81\xA6\n\
  \xE3\x81\x82\xE3\x81\x95\xE3\x81\x8D\xE3\x82\x86\xE3\x82\x81\xE3\x81\xBF\xE3\x81\x97\xE3\x82\x91\xE3\x81\xB2\xE3\x82\x82\xE3\x81\x9B\xE3\x81\x99", i.c_str());

	std::string el = ReadLowercase(2786, 152);
	EXPECT_UTF8EQ("  \xE3\x81\x84\xE3\x82\x8D\xE3\x81\xAF\xE3\x81\xAB\xE3\x81\xBB\xE3\x81\xB8\xE3\x81\xA8\xE3\x81\xA1\xE3\x82\x8A\xE3\x81\xAC\xE3\x82\x8B\xE3\x82\x92\n\
  \xE3\x82\x8F\xE3\x81\x8B\xE3\x82\x88\xE3\x81\x9F\xE3\x82\x8C\xE3\x81\x9D\xE3\x81\xA4\xE3\x81\xAD\xE3\x81\xAA\xE3\x82\x89\xE3\x82\x80\n\
  \xE3\x81\x86\xE3\x82\x90\xE3\x81\xAE\xE3\x81\x8A\xE3\x81\x8F\xE3\x82\x84\xE3\x81\xBE\xE3\x81\x91\xE3\x81\xB5\xE3\x81\x93\xE3\x81\x88\xE3\x81\xA6\n\
  \xE3\x81\x82\xE3\x81\x95\xE3\x81\x8D\xE3\x82\x86\xE3\x82\x81\xE3\x81\xBF\xE3\x81\x97\xE3\x82\x91\xE3\x81\xB2\xE3\x82\x82\xE3\x81\x9B\xE3\x81\x99", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  \xE3\x81\x84\xE3\x82\x8D\xE3\x81\xAF\xE3\x81\xAB\xE3\x81\xBB\xE3\x81\xB8\xE3\x81\xA8\xE3\x81\xA1\xE3\x82\x8A\xE3\x81\xAC\xE3\x82\x8B\xE3\x82\x92\n\
  \xE3\x82\x8F\xE3\x81\x8B\xE3\x82\x88\xE3\x81\x9F\xE3\x82\x8C\xE3\x81\x9D\xE3\x81\xA4\xE3\x81\xAD\xE3\x81\xAA\xE3\x82\x89\xE3\x82\x80\n\
  \xE3\x81\x86\xE3\x82\x90\xE3\x81\xAE\xE3\x81\x8A\xE3\x81\x8F\xE3\x82\x84\xE3\x81\xBE\xE3\x81\x91\xE3\x81\xB5\xE3\x81\x93\xE3\x81\x88\xE3\x81\xA6\n\
  \xE3\x81\x82\xE3\x81\x95\xE3\x81\x8D\xE3\x82\x86\xE3\x82\x81\xE3\x81\xBF\xE3\x81\x97\xE3\x82\x91\xE3\x81\xB2\xE3\x82\x82\xE3\x81\x9B\xE3\x81\x99", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, JapaneseFirstTitlecase)
{
	std::string i = ReadRegular(2786, 152);
	EXPECT_UTF8EQ("  \xE3\x81\x84\xE3\x82\x8D\xE3\x81\xAF\xE3\x81\xAB\xE3\x81\xBB\xE3\x81\xB8\xE3\x81\xA8\xE3\x81\xA1\xE3\x82\x8A\xE3\x81\xAC\xE3\x82\x8B\xE3\x82\x92\n\
  \xE3\x82\x8F\xE3\x81\x8B\xE3\x82\x88\xE3\x81\x9F\xE3\x82\x8C\xE3\x81\x9D\xE3\x81\xA4\xE3\x81\xAD\xE3\x81\xAA\xE3\x82\x89\xE3\x82\x80\n\
  \xE3\x81\x86\xE3\x82\x90\xE3\x81\xAE\xE3\x81\x8A\xE3\x81\x8F\xE3\x82\x84\xE3\x81\xBE\xE3\x81\x91\xE3\x81\xB5\xE3\x81\x93\xE3\x81\x88\xE3\x81\xA6\n\
  \xE3\x81\x82\xE3\x81\x95\xE3\x81\x8D\xE3\x82\x86\xE3\x82\x81\xE3\x81\xBF\xE3\x81\x97\xE3\x82\x91\xE3\x81\xB2\xE3\x82\x82\xE3\x81\x9B\xE3\x81\x99", i.c_str());

	std::string et = ReadTitlecase(2786, 152);
	EXPECT_UTF8EQ("  \xE3\x81\x84\xE3\x82\x8D\xE3\x81\xAF\xE3\x81\xAB\xE3\x81\xBB\xE3\x81\xB8\xE3\x81\xA8\xE3\x81\xA1\xE3\x82\x8A\xE3\x81\xAC\xE3\x82\x8B\xE3\x82\x92\n\
  \xE3\x82\x8F\xE3\x81\x8B\xE3\x82\x88\xE3\x81\x9F\xE3\x82\x8C\xE3\x81\x9D\xE3\x81\xA4\xE3\x81\xAD\xE3\x81\xAA\xE3\x82\x89\xE3\x82\x80\n\
  \xE3\x81\x86\xE3\x82\x90\xE3\x81\xAE\xE3\x81\x8A\xE3\x81\x8F\xE3\x82\x84\xE3\x81\xBE\xE3\x81\x91\xE3\x81\xB5\xE3\x81\x93\xE3\x81\x88\xE3\x81\xA6\n\
  \xE3\x81\x82\xE3\x81\x95\xE3\x81\x8D\xE3\x82\x86\xE3\x82\x81\xE3\x81\xBF\xE3\x81\x97\xE3\x82\x91\xE3\x81\xB2\xE3\x82\x82\xE3\x81\x9B\xE3\x81\x99", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  \xE3\x81\x84\xE3\x82\x8D\xE3\x81\xAF\xE3\x81\xAB\xE3\x81\xBB\xE3\x81\xB8\xE3\x81\xA8\xE3\x81\xA1\xE3\x82\x8A\xE3\x81\xAC\xE3\x82\x8B\xE3\x82\x92\n\
  \xE3\x82\x8F\xE3\x81\x8B\xE3\x82\x88\xE3\x81\x9F\xE3\x82\x8C\xE3\x81\x9D\xE3\x81\xA4\xE3\x81\xAD\xE3\x81\xAA\xE3\x82\x89\xE3\x82\x80\n\
  \xE3\x81\x86\xE3\x82\x90\xE3\x81\xAE\xE3\x81\x8A\xE3\x81\x8F\xE3\x82\x84\xE3\x81\xBE\xE3\x81\x91\xE3\x81\xB5\xE3\x81\x93\xE3\x81\x88\xE3\x81\xA6\n\
  \xE3\x81\x82\xE3\x81\x95\xE3\x81\x8D\xE3\x82\x86\xE3\x82\x81\xE3\x81\xBF\xE3\x81\x97\xE3\x82\x91\xE3\x81\xB2\xE3\x82\x82\xE3\x81\x9B\xE3\x81\x99", at);
}

TEST_F(QuickbrownCaseMapping, JapaneseSecondUppercase)
{
	std::string i = ReadRegular(2953, 155);
	EXPECT_UTF8EQ("  \xE3\x82\xA4\xE3\x83\xAD\xE3\x83\x8F\xE3\x83\x8B\xE3\x83\x9B\xE3\x83\x98\xE3\x83\x88 \xE3\x83\x81\xE3\x83\xAA\xE3\x83\x8C\xE3\x83\xAB\xE3\x83\xB2 \xE3\x83\xAF\xE3\x82\xAB\xE3\x83\xA8\xE3\x82\xBF\xE3\x83\xAC\xE3\x82\xBD \xE3\x83\x84\xE3\x83\x8D\xE3\x83\x8A\xE3\x83\xA9\xE3\x83\xA0\n\
  \xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3", i.c_str());

	std::string eu = ReadUppercase(2957, 155);
	EXPECT_UTF8EQ("  \xE3\x82\xA4\xE3\x83\xAD\xE3\x83\x8F\xE3\x83\x8B\xE3\x83\x9B\xE3\x83\x98\xE3\x83\x88 \xE3\x83\x81\xE3\x83\xAA\xE3\x83\x8C\xE3\x83\xAB\xE3\x83\xB2 \xE3\x83\xAF\xE3\x82\xAB\xE3\x83\xA8\xE3\x82\xBF\xE3\x83\xAC\xE3\x82\xBD \xE3\x83\x84\xE3\x83\x8D\xE3\x83\x8A\xE3\x83\xA9\xE3\x83\xA0\n\
  \xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  \xE3\x82\xA4\xE3\x83\xAD\xE3\x83\x8F\xE3\x83\x8B\xE3\x83\x9B\xE3\x83\x98\xE3\x83\x88 \xE3\x83\x81\xE3\x83\xAA\xE3\x83\x8C\xE3\x83\xAB\xE3\x83\xB2 \xE3\x83\xAF\xE3\x82\xAB\xE3\x83\xA8\xE3\x82\xBF\xE3\x83\xAC\xE3\x82\xBD \xE3\x83\x84\xE3\x83\x8D\xE3\x83\x8A\xE3\x83\xA9\xE3\x83\xA0\n\
  \xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, JapaneseSecondLowercase)
{
	std::string i = ReadRegular(2953, 155);
	EXPECT_UTF8EQ("  \xE3\x82\xA4\xE3\x83\xAD\xE3\x83\x8F\xE3\x83\x8B\xE3\x83\x9B\xE3\x83\x98\xE3\x83\x88 \xE3\x83\x81\xE3\x83\xAA\xE3\x83\x8C\xE3\x83\xAB\xE3\x83\xB2 \xE3\x83\xAF\xE3\x82\xAB\xE3\x83\xA8\xE3\x82\xBF\xE3\x83\xAC\xE3\x82\xBD \xE3\x83\x84\xE3\x83\x8D\xE3\x83\x8A\xE3\x83\xA9\xE3\x83\xA0\n\
  \xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3", i.c_str());

	std::string el = ReadLowercase(2953, 155);
	EXPECT_UTF8EQ("  \xE3\x82\xA4\xE3\x83\xAD\xE3\x83\x8F\xE3\x83\x8B\xE3\x83\x9B\xE3\x83\x98\xE3\x83\x88 \xE3\x83\x81\xE3\x83\xAA\xE3\x83\x8C\xE3\x83\xAB\xE3\x83\xB2 \xE3\x83\xAF\xE3\x82\xAB\xE3\x83\xA8\xE3\x82\xBF\xE3\x83\xAC\xE3\x82\xBD \xE3\x83\x84\xE3\x83\x8D\xE3\x83\x8A\xE3\x83\xA9\xE3\x83\xA0\n\
  \xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  \xE3\x82\xA4\xE3\x83\xAD\xE3\x83\x8F\xE3\x83\x8B\xE3\x83\x9B\xE3\x83\x98\xE3\x83\x88 \xE3\x83\x81\xE3\x83\xAA\xE3\x83\x8C\xE3\x83\xAB\xE3\x83\xB2 \xE3\x83\xAF\xE3\x82\xAB\xE3\x83\xA8\xE3\x82\xBF\xE3\x83\xAC\xE3\x82\xBD \xE3\x83\x84\xE3\x83\x8D\xE3\x83\x8A\xE3\x83\xA9\xE3\x83\xA0\n\
  \xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, JapaneseSecondTitlecase)
{
	std::string i = ReadRegular(2953, 155);
	EXPECT_UTF8EQ("  \xE3\x82\xA4\xE3\x83\xAD\xE3\x83\x8F\xE3\x83\x8B\xE3\x83\x9B\xE3\x83\x98\xE3\x83\x88 \xE3\x83\x81\xE3\x83\xAA\xE3\x83\x8C\xE3\x83\xAB\xE3\x83\xB2 \xE3\x83\xAF\xE3\x82\xAB\xE3\x83\xA8\xE3\x82\xBF\xE3\x83\xAC\xE3\x82\xBD \xE3\x83\x84\xE3\x83\x8D\xE3\x83\x8A\xE3\x83\xA9\xE3\x83\xA0\n\
  \xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3", i.c_str());

	std::string et = ReadTitlecase(2953, 155);
	EXPECT_UTF8EQ("  \xE3\x82\xA4\xE3\x83\xAD\xE3\x83\x8F\xE3\x83\x8B\xE3\x83\x9B\xE3\x83\x98\xE3\x83\x88 \xE3\x83\x81\xE3\x83\xAA\xE3\x83\x8C\xE3\x83\xAB\xE3\x83\xB2 \xE3\x83\xAF\xE3\x82\xAB\xE3\x83\xA8\xE3\x82\xBF\xE3\x83\xAC\xE3\x82\xBD \xE3\x83\x84\xE3\x83\x8D\xE3\x83\x8A\xE3\x83\xA9\xE3\x83\xA0\n\
  \xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  \xE3\x82\xA4\xE3\x83\xAD\xE3\x83\x8F\xE3\x83\x8B\xE3\x83\x9B\xE3\x83\x98\xE3\x83\x88 \xE3\x83\x81\xE3\x83\xAA\xE3\x83\x8C\xE3\x83\xAB\xE3\x83\xB2 \xE3\x83\xAF\xE3\x82\xAB\xE3\x83\xA8\xE3\x82\xBF\xE3\x83\xAC\xE3\x82\xBD \xE3\x83\x84\xE3\x83\x8D\xE3\x83\x8A\xE3\x83\xA9\xE3\x83\xA0\n\
  \xE3\x82\xA6\xE3\x83\xB0\xE3\x83\x8E\xE3\x82\xAA\xE3\x82\xAF\xE3\x83\xA4\xE3\x83\x9E \xE3\x82\xB1\xE3\x83\x95\xE3\x82\xB3\xE3\x82\xA8\xE3\x83\x86 \xE3\x82\xA2\xE3\x82\xB5\xE3\x82\xAD\xE3\x83\xA6\xE3\x83\xA1\xE3\x83\x9F\xE3\x82\xB7 \xE3\x83\xB1\xE3\x83\x92\xE3\x83\xA2\xE3\x82\xBB\xE3\x82\xB9\xE3\x83\xB3", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, HebrewUppercase)
{
	std::string i = ReadRegular(3135, 94);
	EXPECT_UTF8EQ("  ? \xD7\x93\xD7\x92 \xD7\xA1\xD7\xA7\xD7\xA8\xD7\x9F \xD7\xA9\xD7\x98 \xD7\x91\xD7\x99\xD7\x9D \xD7\x9E\xD7\x90\xD7\x95\xD7\x9B\xD7\x96\xD7\x91 \xD7\x95\xD7\x9C\xD7\xA4\xD7\xAA\xD7\xA2 \xD7\x9E\xD7\xA6\xD7\x90 \xD7\x9C\xD7\x95 \xD7\x97\xD7\x91\xD7\xA8\xD7\x94 \xD7\x90\xD7\x99\xD7\x9A \xD7\x94\xD7\xA7\xD7\x9C\xD7\x99\xD7\x98\xD7\x94", i.c_str());

	std::string eu = ReadUppercase(3139, 94);
	EXPECT_UTF8EQ("  ? \xD7\x93\xD7\x92 \xD7\xA1\xD7\xA7\xD7\xA8\xD7\x9F \xD7\xA9\xD7\x98 \xD7\x91\xD7\x99\xD7\x9D \xD7\x9E\xD7\x90\xD7\x95\xD7\x9B\xD7\x96\xD7\x91 \xD7\x95\xD7\x9C\xD7\xA4\xD7\xAA\xD7\xA2 \xD7\x9E\xD7\xA6\xD7\x90 \xD7\x9C\xD7\x95 \xD7\x97\xD7\x91\xD7\xA8\xD7\x94 \xD7\x90\xD7\x99\xD7\x9A \xD7\x94\xD7\xA7\xD7\x9C\xD7\x99\xD7\x98\xD7\x94", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  ? \xD7\x93\xD7\x92 \xD7\xA1\xD7\xA7\xD7\xA8\xD7\x9F \xD7\xA9\xD7\x98 \xD7\x91\xD7\x99\xD7\x9D \xD7\x9E\xD7\x90\xD7\x95\xD7\x9B\xD7\x96\xD7\x91 \xD7\x95\xD7\x9C\xD7\xA4\xD7\xAA\xD7\xA2 \xD7\x9E\xD7\xA6\xD7\x90 \xD7\x9C\xD7\x95 \xD7\x97\xD7\x91\xD7\xA8\xD7\x94 \xD7\x90\xD7\x99\xD7\x9A \xD7\x94\xD7\xA7\xD7\x9C\xD7\x99\xD7\x98\xD7\x94", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, HebrewLowercase)
{
	std::string i = ReadRegular(3135, 94);
	EXPECT_UTF8EQ("  ? \xD7\x93\xD7\x92 \xD7\xA1\xD7\xA7\xD7\xA8\xD7\x9F \xD7\xA9\xD7\x98 \xD7\x91\xD7\x99\xD7\x9D \xD7\x9E\xD7\x90\xD7\x95\xD7\x9B\xD7\x96\xD7\x91 \xD7\x95\xD7\x9C\xD7\xA4\xD7\xAA\xD7\xA2 \xD7\x9E\xD7\xA6\xD7\x90 \xD7\x9C\xD7\x95 \xD7\x97\xD7\x91\xD7\xA8\xD7\x94 \xD7\x90\xD7\x99\xD7\x9A \xD7\x94\xD7\xA7\xD7\x9C\xD7\x99\xD7\x98\xD7\x94", i.c_str());

	std::string el = ReadLowercase(3135, 94);
	EXPECT_UTF8EQ("  ? \xD7\x93\xD7\x92 \xD7\xA1\xD7\xA7\xD7\xA8\xD7\x9F \xD7\xA9\xD7\x98 \xD7\x91\xD7\x99\xD7\x9D \xD7\x9E\xD7\x90\xD7\x95\xD7\x9B\xD7\x96\xD7\x91 \xD7\x95\xD7\x9C\xD7\xA4\xD7\xAA\xD7\xA2 \xD7\x9E\xD7\xA6\xD7\x90 \xD7\x9C\xD7\x95 \xD7\x97\xD7\x91\xD7\xA8\xD7\x94 \xD7\x90\xD7\x99\xD7\x9A \xD7\x94\xD7\xA7\xD7\x9C\xD7\x99\xD7\x98\xD7\x94", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  ? \xD7\x93\xD7\x92 \xD7\xA1\xD7\xA7\xD7\xA8\xD7\x9F \xD7\xA9\xD7\x98 \xD7\x91\xD7\x99\xD7\x9D \xD7\x9E\xD7\x90\xD7\x95\xD7\x9B\xD7\x96\xD7\x91 \xD7\x95\xD7\x9C\xD7\xA4\xD7\xAA\xD7\xA2 \xD7\x9E\xD7\xA6\xD7\x90 \xD7\x9C\xD7\x95 \xD7\x97\xD7\x91\xD7\xA8\xD7\x94 \xD7\x90\xD7\x99\xD7\x9A \xD7\x94\xD7\xA7\xD7\x9C\xD7\x99\xD7\x98\xD7\x94", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, HebrewTitlecase)
{
	std::string i = ReadRegular(3135, 94);
	EXPECT_UTF8EQ("  ? \xD7\x93\xD7\x92 \xD7\xA1\xD7\xA7\xD7\xA8\xD7\x9F \xD7\xA9\xD7\x98 \xD7\x91\xD7\x99\xD7\x9D \xD7\x9E\xD7\x90\xD7\x95\xD7\x9B\xD7\x96\xD7\x91 \xD7\x95\xD7\x9C\xD7\xA4\xD7\xAA\xD7\xA2 \xD7\x9E\xD7\xA6\xD7\x90 \xD7\x9C\xD7\x95 \xD7\x97\xD7\x91\xD7\xA8\xD7\x94 \xD7\x90\xD7\x99\xD7\x9A \xD7\x94\xD7\xA7\xD7\x9C\xD7\x99\xD7\x98\xD7\x94", i.c_str());

	std::string et = ReadTitlecase(3135, 94);
	EXPECT_UTF8EQ("  ? \xD7\x93\xD7\x92 \xD7\xA1\xD7\xA7\xD7\xA8\xD7\x9F \xD7\xA9\xD7\x98 \xD7\x91\xD7\x99\xD7\x9D \xD7\x9E\xD7\x90\xD7\x95\xD7\x9B\xD7\x96\xD7\x91 \xD7\x95\xD7\x9C\xD7\xA4\xD7\xAA\xD7\xA2 \xD7\x9E\xD7\xA6\xD7\x90 \xD7\x9C\xD7\x95 \xD7\x97\xD7\x91\xD7\xA8\xD7\x94 \xD7\x90\xD7\x99\xD7\x9A \xD7\x94\xD7\xA7\xD7\x9C\xD7\x99\xD7\x98\xD7\x94", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  ? \xD7\x93\xD7\x92 \xD7\xA1\xD7\xA7\xD7\xA8\xD7\x9F \xD7\xA9\xD7\x98 \xD7\x91\xD7\x99\xD7\x9D \xD7\x9E\xD7\x90\xD7\x95\xD7\x9B\xD7\x96\xD7\x91 \xD7\x95\xD7\x9C\xD7\xA4\xD7\xAA\xD7\xA2 \xD7\x9E\xD7\xA6\xD7\x90 \xD7\x9C\xD7\x95 \xD7\x97\xD7\x91\xD7\xA8\xD7\x94 \xD7\x90\xD7\x99\xD7\x9A \xD7\x94\xD7\xA7\xD7\x9C\xD7\x99\xD7\x98\xD7\x94", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, PolishUppercase)
{
	std::string i = ReadRegular(3256, 51);
	EXPECT_UTF8EQ("  Pchn\xC4\x85\xC4\x87 w t\xC4\x99 \xC5\x82\xC3\xB3" "d\xC5\xBA je\xC5\xBC" "a lub o\xC5\x9Bm skrzy\xC5\x84 fig", i.c_str());

	std::string eu = ReadUppercase(3260, 51);
	EXPECT_UTF8EQ("  PCHN\xC4\x84\xC4\x86 W T\xC4\x98 \xC5\x81\xC3\x93" "D\xC5\xB9 JE\xC5\xBB" "A LUB O\xC5\x9AM SKRZY\xC5\x83 FIG", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  PCHN\xC4\x84\xC4\x86 W T\xC4\x98 \xC5\x81\xC3\x93" "D\xC5\xB9 JE\xC5\xBB" "A LUB O\xC5\x9AM SKRZY\xC5\x83 FIG", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, PolishLowercase)
{
	std::string i = ReadRegular(3256, 51);
	EXPECT_UTF8EQ("  Pchn\xC4\x85\xC4\x87 w t\xC4\x99 \xC5\x82\xC3\xB3" "d\xC5\xBA je\xC5\xBC" "a lub o\xC5\x9Bm skrzy\xC5\x84 fig", i.c_str());

	std::string el = ReadLowercase(3256, 51);
	EXPECT_UTF8EQ("  pchn\xC4\x85\xC4\x87 w t\xC4\x99 \xC5\x82\xC3\xB3" "d\xC5\xBA je\xC5\xBC" "a lub o\xC5\x9Bm skrzy\xC5\x84 fig", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  pchn\xC4\x85\xC4\x87 w t\xC4\x99 \xC5\x82\xC3\xB3" "d\xC5\xBA je\xC5\xBC" "a lub o\xC5\x9Bm skrzy\xC5\x84 fig", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, PolishTitlecase)
{
	std::string i = ReadRegular(3256, 51);
	EXPECT_UTF8EQ("  Pchn\xC4\x85\xC4\x87 w t\xC4\x99 \xC5\x82\xC3\xB3" "d\xC5\xBA je\xC5\xBC" "a lub o\xC5\x9Bm skrzy\xC5\x84 fig", i.c_str());

	std::string et = ReadTitlecase(3256, 51);
	EXPECT_UTF8EQ("  Pchn\xC4\x85\xC4\x87 W T\xC4\x99 \xC5\x81\xC3\xB3" "d\xC5\xBA Je\xC5\xBC" "a Lub O\xC5\x9Bm Skrzy\xC5\x84 Fig", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  Pchn\xC4\x85\xC4\x87 W T\xC4\x99 \xC5\x81\xC3\xB3" "d\xC5\xBA Je\xC5\xBC" "a Lub O\xC5\x9Bm Skrzy\xC5\x84 Fig", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, RussianFirstUppercase)
{
	std::string i = ReadRegular(3396, 98);
	EXPECT_UTF8EQ("  \xD0\x92 \xD1\x87\xD0\xB0\xD1\x89\xD0\xB0\xD1\x85 \xD1\x8E\xD0\xB3\xD0\xB0 \xD0\xB6\xD0\xB8\xD0\xBB \xD0\xB1\xD1\x8B \xD1\x86\xD0\xB8\xD1\x82\xD1\x80\xD1\x83\xD1\x81? \xD0\x94\xD0\xB0, \xD0\xBD\xD0\xBE \xD1\x84\xD0\xB0\xD0\xBB\xD1\x8C\xD1\x88\xD0\xB8\xD0\xB2\xD1\x8B\xD0\xB9 \xD1\x8D\xD0\xBA\xD0\xB7\xD0\xB5\xD0\xBC\xD0\xBF\xD0\xBB\xD1\x8F\xD1\x80!", i.c_str());

	std::string eu = ReadUppercase(3400, 98);
	EXPECT_UTF8EQ("  \xD0\x92 \xD0\xA7\xD0\x90\xD0\xA9\xD0\x90\xD0\xA5 \xD0\xAE\xD0\x93\xD0\x90 \xD0\x96\xD0\x98\xD0\x9B \xD0\x91\xD0\xAB \xD0\xA6\xD0\x98\xD0\xA2\xD0\xA0\xD0\xA3\xD0\xA1? \xD0\x94\xD0\x90, \xD0\x9D\xD0\x9E \xD0\xA4\xD0\x90\xD0\x9B\xD0\xAC\xD0\xA8\xD0\x98\xD0\x92\xD0\xAB\xD0\x99 \xD0\xAD\xD0\x9A\xD0\x97\xD0\x95\xD0\x9C\xD0\x9F\xD0\x9B\xD0\xAF\xD0\xA0!", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  \xD0\x92 \xD0\xA7\xD0\x90\xD0\xA9\xD0\x90\xD0\xA5 \xD0\xAE\xD0\x93\xD0\x90 \xD0\x96\xD0\x98\xD0\x9B \xD0\x91\xD0\xAB \xD0\xA6\xD0\x98\xD0\xA2\xD0\xA0\xD0\xA3\xD0\xA1? \xD0\x94\xD0\x90, \xD0\x9D\xD0\x9E \xD0\xA4\xD0\x90\xD0\x9B\xD0\xAC\xD0\xA8\xD0\x98\xD0\x92\xD0\xAB\xD0\x99 \xD0\xAD\xD0\x9A\xD0\x97\xD0\x95\xD0\x9C\xD0\x9F\xD0\x9B\xD0\xAF\xD0\xA0!", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, RussianFirstLowercase)
{
	std::string i = ReadRegular(3396, 98);
	EXPECT_UTF8EQ("  \xD0\x92 \xD1\x87\xD0\xB0\xD1\x89\xD0\xB0\xD1\x85 \xD1\x8E\xD0\xB3\xD0\xB0 \xD0\xB6\xD0\xB8\xD0\xBB \xD0\xB1\xD1\x8B \xD1\x86\xD0\xB8\xD1\x82\xD1\x80\xD1\x83\xD1\x81? \xD0\x94\xD0\xB0, \xD0\xBD\xD0\xBE \xD1\x84\xD0\xB0\xD0\xBB\xD1\x8C\xD1\x88\xD0\xB8\xD0\xB2\xD1\x8B\xD0\xB9 \xD1\x8D\xD0\xBA\xD0\xB7\xD0\xB5\xD0\xBC\xD0\xBF\xD0\xBB\xD1\x8F\xD1\x80!", i.c_str());

	std::string el = ReadLowercase(3396, 98);
	EXPECT_UTF8EQ("  \xD0\xB2 \xD1\x87\xD0\xB0\xD1\x89\xD0\xB0\xD1\x85 \xD1\x8E\xD0\xB3\xD0\xB0 \xD0\xB6\xD0\xB8\xD0\xBB \xD0\xB1\xD1\x8B \xD1\x86\xD0\xB8\xD1\x82\xD1\x80\xD1\x83\xD1\x81? \xD0\xB4\xD0\xB0, \xD0\xBD\xD0\xBE \xD1\x84\xD0\xB0\xD0\xBB\xD1\x8C\xD1\x88\xD0\xB8\xD0\xB2\xD1\x8B\xD0\xB9 \xD1\x8D\xD0\xBA\xD0\xB7\xD0\xB5\xD0\xBC\xD0\xBF\xD0\xBB\xD1\x8F\xD1\x80!", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  \xD0\xB2 \xD1\x87\xD0\xB0\xD1\x89\xD0\xB0\xD1\x85 \xD1\x8E\xD0\xB3\xD0\xB0 \xD0\xB6\xD0\xB8\xD0\xBB \xD0\xB1\xD1\x8B \xD1\x86\xD0\xB8\xD1\x82\xD1\x80\xD1\x83\xD1\x81? \xD0\xB4\xD0\xB0, \xD0\xBD\xD0\xBE \xD1\x84\xD0\xB0\xD0\xBB\xD1\x8C\xD1\x88\xD0\xB8\xD0\xB2\xD1\x8B\xD0\xB9 \xD1\x8D\xD0\xBA\xD0\xB7\xD0\xB5\xD0\xBC\xD0\xBF\xD0\xBB\xD1\x8F\xD1\x80!", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, RussianFirstTitlecase)
{
	std::string i = ReadRegular(3396, 98);
	EXPECT_UTF8EQ("  \xD0\x92 \xD1\x87\xD0\xB0\xD1\x89\xD0\xB0\xD1\x85 \xD1\x8E\xD0\xB3\xD0\xB0 \xD0\xB6\xD0\xB8\xD0\xBB \xD0\xB1\xD1\x8B \xD1\x86\xD0\xB8\xD1\x82\xD1\x80\xD1\x83\xD1\x81? \xD0\x94\xD0\xB0, \xD0\xBD\xD0\xBE \xD1\x84\xD0\xB0\xD0\xBB\xD1\x8C\xD1\x88\xD0\xB8\xD0\xB2\xD1\x8B\xD0\xB9 \xD1\x8D\xD0\xBA\xD0\xB7\xD0\xB5\xD0\xBC\xD0\xBF\xD0\xBB\xD1\x8F\xD1\x80!", i.c_str());

	std::string et = ReadTitlecase(3396, 98);
	EXPECT_UTF8EQ("  \xD0\x92 \xD0\xA7\xD0\xB0\xD1\x89\xD0\xB0\xD1\x85 \xD0\xAE\xD0\xB3\xD0\xB0 \xD0\x96\xD0\xB8\xD0\xBB \xD0\x91\xD1\x8B \xD0\xA6\xD0\xB8\xD1\x82\xD1\x80\xD1\x83\xD1\x81? \xD0\x94\xD0\xB0, \xD0\x9D\xD0\xBE \xD0\xA4\xD0\xB0\xD0\xBB\xD1\x8C\xD1\x88\xD0\xB8\xD0\xB2\xD1\x8B\xD0\xB9 \xD0\xAD\xD0\xBA\xD0\xB7\xD0\xB5\xD0\xBC\xD0\xBF\xD0\xBB\xD1\x8F\xD1\x80!", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  \xD0\x92 \xD0\xA7\xD0\xB0\xD1\x89\xD0\xB0\xD1\x85 \xD0\xAE\xD0\xB3\xD0\xB0 \xD0\x96\xD0\xB8\xD0\xBB \xD0\x91\xD1\x8B \xD0\xA6\xD0\xB8\xD1\x82\xD1\x80\xD1\x83\xD1\x81? \xD0\x94\xD0\xB0, \xD0\x9D\xD0\xBE \xD0\xA4\xD0\xB0\xD0\xBB\xD1\x8C\xD1\x88\xD0\xB8\xD0\xB2\xD1\x8B\xD0\xB9 \xD0\xAD\xD0\xBA\xD0\xB7\xD0\xB5\xD0\xBC\xD0\xBF\xD0\xBB\xD1\x8F\xD1\x80!", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, RussianSecondUppercase)
{
	std::string i = ReadRegular(3572, 103);
	EXPECT_UTF8EQ("  \xD0\xA1\xD1\x8A\xD0\xB5\xD1\x88\xD1\x8C \xD0\xB6\xD0\xB5 \xD0\xB5\xD1\x89\xD1\x91 \xD1\x8D\xD1\x82\xD0\xB8\xD1\x85 \xD0\xBC\xD1\x8F\xD0\xB3\xD0\xBA\xD0\xB8\xD1\x85 \xD1\x84\xD1\x80\xD0\xB0\xD0\xBD\xD1\x86\xD1\x83\xD0\xB7\xD1\x81\xD0\xBA\xD0\xB8\xD1\x85 \xD0\xB1\xD1\x83\xD0\xBB\xD0\xBE\xD0\xBA \xD0\xB4\xD0\xB0 \xD0\xB2\xD1\x8B\xD0\xBF\xD0\xB5\xD0\xB9 \xD1\x87\xD0\xB0\xD1\x8E", i.c_str());

	std::string eu = ReadUppercase(3576, 103);
	EXPECT_UTF8EQ("  \xD0\xA1\xD0\xAA\xD0\x95\xD0\xA8\xD0\xAC \xD0\x96\xD0\x95 \xD0\x95\xD0\xA9\xD0\x81 \xD0\xAD\xD0\xA2\xD0\x98\xD0\xA5 \xD0\x9C\xD0\xAF\xD0\x93\xD0\x9A\xD0\x98\xD0\xA5 \xD0\xA4\xD0\xA0\xD0\x90\xD0\x9D\xD0\xA6\xD0\xA3\xD0\x97\xD0\xA1\xD0\x9A\xD0\x98\xD0\xA5 \xD0\x91\xD0\xA3\xD0\x9B\xD0\x9E\xD0\x9A \xD0\x94\xD0\x90 \xD0\x92\xD0\xAB\xD0\x9F\xD0\x95\xD0\x99 \xD0\xA7\xD0\x90\xD0\xAE", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  \xD0\xA1\xD0\xAA\xD0\x95\xD0\xA8\xD0\xAC \xD0\x96\xD0\x95 \xD0\x95\xD0\xA9\xD0\x81 \xD0\xAD\xD0\xA2\xD0\x98\xD0\xA5 \xD0\x9C\xD0\xAF\xD0\x93\xD0\x9A\xD0\x98\xD0\xA5 \xD0\xA4\xD0\xA0\xD0\x90\xD0\x9D\xD0\xA6\xD0\xA3\xD0\x97\xD0\xA1\xD0\x9A\xD0\x98\xD0\xA5 \xD0\x91\xD0\xA3\xD0\x9B\xD0\x9E\xD0\x9A \xD0\x94\xD0\x90 \xD0\x92\xD0\xAB\xD0\x9F\xD0\x95\xD0\x99 \xD0\xA7\xD0\x90\xD0\xAE", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, RussianSecondLowercase)
{
	std::string i = ReadRegular(3572, 103);
	EXPECT_UTF8EQ("  \xD0\xA1\xD1\x8A\xD0\xB5\xD1\x88\xD1\x8C \xD0\xB6\xD0\xB5 \xD0\xB5\xD1\x89\xD1\x91 \xD1\x8D\xD1\x82\xD0\xB8\xD1\x85 \xD0\xBC\xD1\x8F\xD0\xB3\xD0\xBA\xD0\xB8\xD1\x85 \xD1\x84\xD1\x80\xD0\xB0\xD0\xBD\xD1\x86\xD1\x83\xD0\xB7\xD1\x81\xD0\xBA\xD0\xB8\xD1\x85 \xD0\xB1\xD1\x83\xD0\xBB\xD0\xBE\xD0\xBA \xD0\xB4\xD0\xB0 \xD0\xB2\xD1\x8B\xD0\xBF\xD0\xB5\xD0\xB9 \xD1\x87\xD0\xB0\xD1\x8E", i.c_str());

	std::string el = ReadLowercase(3572, 103);
	EXPECT_UTF8EQ("  \xD1\x81\xD1\x8A\xD0\xB5\xD1\x88\xD1\x8C \xD0\xB6\xD0\xB5 \xD0\xB5\xD1\x89\xD1\x91 \xD1\x8D\xD1\x82\xD0\xB8\xD1\x85 \xD0\xBC\xD1\x8F\xD0\xB3\xD0\xBA\xD0\xB8\xD1\x85 \xD1\x84\xD1\x80\xD0\xB0\xD0\xBD\xD1\x86\xD1\x83\xD0\xB7\xD1\x81\xD0\xBA\xD0\xB8\xD1\x85 \xD0\xB1\xD1\x83\xD0\xBB\xD0\xBE\xD0\xBA \xD0\xB4\xD0\xB0 \xD0\xB2\xD1\x8B\xD0\xBF\xD0\xB5\xD0\xB9 \xD1\x87\xD0\xB0\xD1\x8E", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  \xD1\x81\xD1\x8A\xD0\xB5\xD1\x88\xD1\x8C \xD0\xB6\xD0\xB5 \xD0\xB5\xD1\x89\xD1\x91 \xD1\x8D\xD1\x82\xD0\xB8\xD1\x85 \xD0\xBC\xD1\x8F\xD0\xB3\xD0\xBA\xD0\xB8\xD1\x85 \xD1\x84\xD1\x80\xD0\xB0\xD0\xBD\xD1\x86\xD1\x83\xD0\xB7\xD1\x81\xD0\xBA\xD0\xB8\xD1\x85 \xD0\xB1\xD1\x83\xD0\xBB\xD0\xBE\xD0\xBA \xD0\xB4\xD0\xB0 \xD0\xB2\xD1\x8B\xD0\xBF\xD0\xB5\xD0\xB9 \xD1\x87\xD0\xB0\xD1\x8E", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, RussianSecondTitlecase)
{
	std::string i = ReadRegular(3572, 103);
	EXPECT_UTF8EQ("  \xD0\xA1\xD1\x8A\xD0\xB5\xD1\x88\xD1\x8C \xD0\xB6\xD0\xB5 \xD0\xB5\xD1\x89\xD1\x91 \xD1\x8D\xD1\x82\xD0\xB8\xD1\x85 \xD0\xBC\xD1\x8F\xD0\xB3\xD0\xBA\xD0\xB8\xD1\x85 \xD1\x84\xD1\x80\xD0\xB0\xD0\xBD\xD1\x86\xD1\x83\xD0\xB7\xD1\x81\xD0\xBA\xD0\xB8\xD1\x85 \xD0\xB1\xD1\x83\xD0\xBB\xD0\xBE\xD0\xBA \xD0\xB4\xD0\xB0 \xD0\xB2\xD1\x8B\xD0\xBF\xD0\xB5\xD0\xB9 \xD1\x87\xD0\xB0\xD1\x8E", i.c_str());

	std::string et = ReadTitlecase(3572, 103);
	EXPECT_UTF8EQ("  \xD0\xA1\xD1\x8A\xD0\xB5\xD1\x88\xD1\x8C \xD0\x96\xD0\xB5 \xD0\x95\xD1\x89\xD1\x91 \xD0\xAD\xD1\x82\xD0\xB8\xD1\x85 \xD0\x9C\xD1\x8F\xD0\xB3\xD0\xBA\xD0\xB8\xD1\x85 \xD0\xA4\xD1\x80\xD0\xB0\xD0\xBD\xD1\x86\xD1\x83\xD0\xB7\xD1\x81\xD0\xBA\xD0\xB8\xD1\x85 \xD0\x91\xD1\x83\xD0\xBB\xD0\xBE\xD0\xBA \xD0\x94\xD0\xB0 \xD0\x92\xD1\x8B\xD0\xBF\xD0\xB5\xD0\xB9 \xD0\xA7\xD0\xB0\xD1\x8E", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  \xD0\xA1\xD1\x8A\xD0\xB5\xD1\x88\xD1\x8C \xD0\x96\xD0\xB5 \xD0\x95\xD1\x89\xD1\x91 \xD0\xAD\xD1\x82\xD0\xB8\xD1\x85 \xD0\x9C\xD1\x8F\xD0\xB3\xD0\xBA\xD0\xB8\xD1\x85 \xD0\xA4\xD1\x80\xD0\xB0\xD0\xBD\xD1\x86\xD1\x83\xD0\xB7\xD1\x81\xD0\xBA\xD0\xB8\xD1\x85 \xD0\x91\xD1\x83\xD0\xBB\xD0\xBE\xD0\xBA \xD0\x94\xD0\xB0 \xD0\x92\xD1\x8B\xD0\xBF\xD0\xB5\xD0\xB9 \xD0\xA7\xD0\xB0\xD1\x8E", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, ThaiUppercase)
{
	std::string i = ReadRegular(3821, 665);
	EXPECT_UTF8EQ("  \xE0\xB9\x8F \xE0\xB9\x80\xE0\xB8\x9B\xE0\xB9\x87\xE0\xB8\x99\xE0\xB8\xA1\xE0\xB8\x99\xE0\xB8\xB8\xE0\xB8\xA9\xE0\xB8\xA2\xE0\xB9\x8C\xE0\xB8\xAA\xE0\xB8\xB8\xE0\xB8\x94\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB9\x80\xE0\xB8\xAA\xE0\xB8\xA3\xE0\xB8\xB4\xE0\xB8\x90\xE0\xB9\x80\xE0\xB8\xA5\xE0\xB8\xB4\xE0\xB8\xA8\xE0\xB8\x84\xE0\xB8\xB8\xE0\xB8\x93\xE0\xB8\x84\xE0\xB9\x88\xE0\xB8\xB2  \xE0\xB8\x81\xE0\xB8\xA7\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xA3\xE0\xB8\xA3\xE0\xB8\x94\xE0\xB8\xB2\xE0\xB8\x9D\xE0\xB8\xB9\xE0\xB8\x87\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xA7\xE0\xB9\x8C\xE0\xB9\x80\xE0\xB8\x94\xE0\xB8\xA3\xE0\xB8\xB1\xE0\xB8\x88\xE0\xB8\x89\xE0\xB8\xB2\xE0\xB8\x99\n\
  \xE0\xB8\x88\xE0\xB8\x87\xE0\xB8\x9D\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x99\xE0\xB8\x9E\xE0\xB8\xB1\xE0\xB8\x92\xE0\xB8\x99\xE0\xB8\xB2\xE0\xB8\xA7\xE0\xB8\xB4\xE0\xB8\x8A\xE0\xB8\xB2\xE0\xB8\x81\xE0\xB8\xB2\xE0\xB8\xA3           \xE0\xB8\xAD\xE0\xB8\xA2\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\xA5\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87\xE0\xB8\x9C\xE0\xB8\xA5\xE0\xB8\xB2\xE0\xB8\x8D\xE0\xB8\xA4\xE0\xB9\x85\xE0\xB9\x80\xE0\xB8\x82\xE0\xB9\x88\xE0\xB8\x99\xE0\xB8\x86\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xB5\xE0\xB8\x91\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\x84\xE0\xB8\xA3\n\
  \xE0\xB9\x84\xE0\xB8\xA1\xE0\xB9\x88\xE0\xB8\x96\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB9\x82\xE0\xB8\x97\xE0\xB8\xA9\xE0\xB9\x82\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\x98\xE0\xB9\x81\xE0\xB8\x8A\xE0\xB9\x88\xE0\xB8\x87\xE0\xB8\x8B\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB6\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\x94\xE0\xB9\x88\xE0\xB8\xB2     \xE0\xB8\xAB\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAD\xE0\xB8\xA0\xE0\xB8\xB1\xE0\xB8\xA2\xE0\xB9\x80\xE0\xB8\xAB\xE0\xB8\xA1\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB8\x99\xE0\xB8\x81\xE0\xB8\xB5\xE0\xB8\xAC\xE0\xB8\xB2\xE0\xB8\xAD\xE0\xB8\xB1\xE0\xB8\x8A\xE0\xB8\x8C\xE0\xB8\xB2\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\xA2\n\
  \xE0\xB8\x9B\xE0\xB8\x8F\xE0\xB8\xB4\xE0\xB8\x9A\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB8\x9E\xE0\xB8\xA4\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x81\xE0\xB8\x8E\xE0\xB8\x81\xE0\xB8\xB3\xE0\xB8\xAB\xE0\xB8\x99\xE0\xB8\x94\xE0\xB9\x83\xE0\xB8\x88        \xE0\xB8\x9E\xE0\xB8\xB9\xE0\xB8\x94\xE0\xB8\x88\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\xAB\xE0\xB9\x89\xE0\xB8\x88\xE0\xB9\x8A\xE0\xB8\xB0\xE0\xB9\x86 \xE0\xB8\x88\xE0\xB9\x8B\xE0\xB8\xB2\xE0\xB9\x86 \xE0\xB8\x99\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x87\xE0\xB9\x80\xE0\xB8\xAD\xE0\xB8\xA2 \xE0\xB8\xAF", i.c_str());

	std::string eu = ReadUppercase(3825, 665);
	EXPECT_UTF8EQ("  \xE0\xB9\x8F \xE0\xB9\x80\xE0\xB8\x9B\xE0\xB9\x87\xE0\xB8\x99\xE0\xB8\xA1\xE0\xB8\x99\xE0\xB8\xB8\xE0\xB8\xA9\xE0\xB8\xA2\xE0\xB9\x8C\xE0\xB8\xAA\xE0\xB8\xB8\xE0\xB8\x94\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB9\x80\xE0\xB8\xAA\xE0\xB8\xA3\xE0\xB8\xB4\xE0\xB8\x90\xE0\xB9\x80\xE0\xB8\xA5\xE0\xB8\xB4\xE0\xB8\xA8\xE0\xB8\x84\xE0\xB8\xB8\xE0\xB8\x93\xE0\xB8\x84\xE0\xB9\x88\xE0\xB8\xB2  \xE0\xB8\x81\xE0\xB8\xA7\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xA3\xE0\xB8\xA3\xE0\xB8\x94\xE0\xB8\xB2\xE0\xB8\x9D\xE0\xB8\xB9\xE0\xB8\x87\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xA7\xE0\xB9\x8C\xE0\xB9\x80\xE0\xB8\x94\xE0\xB8\xA3\xE0\xB8\xB1\xE0\xB8\x88\xE0\xB8\x89\xE0\xB8\xB2\xE0\xB8\x99\n\
  \xE0\xB8\x88\xE0\xB8\x87\xE0\xB8\x9D\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x99\xE0\xB8\x9E\xE0\xB8\xB1\xE0\xB8\x92\xE0\xB8\x99\xE0\xB8\xB2\xE0\xB8\xA7\xE0\xB8\xB4\xE0\xB8\x8A\xE0\xB8\xB2\xE0\xB8\x81\xE0\xB8\xB2\xE0\xB8\xA3           \xE0\xB8\xAD\xE0\xB8\xA2\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\xA5\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87\xE0\xB8\x9C\xE0\xB8\xA5\xE0\xB8\xB2\xE0\xB8\x8D\xE0\xB8\xA4\xE0\xB9\x85\xE0\xB9\x80\xE0\xB8\x82\xE0\xB9\x88\xE0\xB8\x99\xE0\xB8\x86\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xB5\xE0\xB8\x91\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\x84\xE0\xB8\xA3\n\
  \xE0\xB9\x84\xE0\xB8\xA1\xE0\xB9\x88\xE0\xB8\x96\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB9\x82\xE0\xB8\x97\xE0\xB8\xA9\xE0\xB9\x82\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\x98\xE0\xB9\x81\xE0\xB8\x8A\xE0\xB9\x88\xE0\xB8\x87\xE0\xB8\x8B\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB6\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\x94\xE0\xB9\x88\xE0\xB8\xB2     \xE0\xB8\xAB\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAD\xE0\xB8\xA0\xE0\xB8\xB1\xE0\xB8\xA2\xE0\xB9\x80\xE0\xB8\xAB\xE0\xB8\xA1\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB8\x99\xE0\xB8\x81\xE0\xB8\xB5\xE0\xB8\xAC\xE0\xB8\xB2\xE0\xB8\xAD\xE0\xB8\xB1\xE0\xB8\x8A\xE0\xB8\x8C\xE0\xB8\xB2\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\xA2\n\
  \xE0\xB8\x9B\xE0\xB8\x8F\xE0\xB8\xB4\xE0\xB8\x9A\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB8\x9E\xE0\xB8\xA4\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x81\xE0\xB8\x8E\xE0\xB8\x81\xE0\xB8\xB3\xE0\xB8\xAB\xE0\xB8\x99\xE0\xB8\x94\xE0\xB9\x83\xE0\xB8\x88        \xE0\xB8\x9E\xE0\xB8\xB9\xE0\xB8\x94\xE0\xB8\x88\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\xAB\xE0\xB9\x89\xE0\xB8\x88\xE0\xB9\x8A\xE0\xB8\xB0\xE0\xB9\x86 \xE0\xB8\x88\xE0\xB9\x8B\xE0\xB8\xB2\xE0\xB9\x86 \xE0\xB8\x99\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x87\xE0\xB9\x80\xE0\xB8\xAD\xE0\xB8\xA2 \xE0\xB8\xAF", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_DEFAULT, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  \xE0\xB9\x8F \xE0\xB9\x80\xE0\xB8\x9B\xE0\xB9\x87\xE0\xB8\x99\xE0\xB8\xA1\xE0\xB8\x99\xE0\xB8\xB8\xE0\xB8\xA9\xE0\xB8\xA2\xE0\xB9\x8C\xE0\xB8\xAA\xE0\xB8\xB8\xE0\xB8\x94\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB9\x80\xE0\xB8\xAA\xE0\xB8\xA3\xE0\xB8\xB4\xE0\xB8\x90\xE0\xB9\x80\xE0\xB8\xA5\xE0\xB8\xB4\xE0\xB8\xA8\xE0\xB8\x84\xE0\xB8\xB8\xE0\xB8\x93\xE0\xB8\x84\xE0\xB9\x88\xE0\xB8\xB2  \xE0\xB8\x81\xE0\xB8\xA7\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xA3\xE0\xB8\xA3\xE0\xB8\x94\xE0\xB8\xB2\xE0\xB8\x9D\xE0\xB8\xB9\xE0\xB8\x87\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xA7\xE0\xB9\x8C\xE0\xB9\x80\xE0\xB8\x94\xE0\xB8\xA3\xE0\xB8\xB1\xE0\xB8\x88\xE0\xB8\x89\xE0\xB8\xB2\xE0\xB8\x99\n\
  \xE0\xB8\x88\xE0\xB8\x87\xE0\xB8\x9D\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x99\xE0\xB8\x9E\xE0\xB8\xB1\xE0\xB8\x92\xE0\xB8\x99\xE0\xB8\xB2\xE0\xB8\xA7\xE0\xB8\xB4\xE0\xB8\x8A\xE0\xB8\xB2\xE0\xB8\x81\xE0\xB8\xB2\xE0\xB8\xA3           \xE0\xB8\xAD\xE0\xB8\xA2\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\xA5\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87\xE0\xB8\x9C\xE0\xB8\xA5\xE0\xB8\xB2\xE0\xB8\x8D\xE0\xB8\xA4\xE0\xB9\x85\xE0\xB9\x80\xE0\xB8\x82\xE0\xB9\x88\xE0\xB8\x99\xE0\xB8\x86\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xB5\xE0\xB8\x91\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\x84\xE0\xB8\xA3\n\
  \xE0\xB9\x84\xE0\xB8\xA1\xE0\xB9\x88\xE0\xB8\x96\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB9\x82\xE0\xB8\x97\xE0\xB8\xA9\xE0\xB9\x82\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\x98\xE0\xB9\x81\xE0\xB8\x8A\xE0\xB9\x88\xE0\xB8\x87\xE0\xB8\x8B\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB6\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\x94\xE0\xB9\x88\xE0\xB8\xB2     \xE0\xB8\xAB\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAD\xE0\xB8\xA0\xE0\xB8\xB1\xE0\xB8\xA2\xE0\xB9\x80\xE0\xB8\xAB\xE0\xB8\xA1\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB8\x99\xE0\xB8\x81\xE0\xB8\xB5\xE0\xB8\xAC\xE0\xB8\xB2\xE0\xB8\xAD\xE0\xB8\xB1\xE0\xB8\x8A\xE0\xB8\x8C\xE0\xB8\xB2\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\xA2\n\
  \xE0\xB8\x9B\xE0\xB8\x8F\xE0\xB8\xB4\xE0\xB8\x9A\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB8\x9E\xE0\xB8\xA4\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x81\xE0\xB8\x8E\xE0\xB8\x81\xE0\xB8\xB3\xE0\xB8\xAB\xE0\xB8\x99\xE0\xB8\x94\xE0\xB9\x83\xE0\xB8\x88        \xE0\xB8\x9E\xE0\xB8\xB9\xE0\xB8\x94\xE0\xB8\x88\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\xAB\xE0\xB9\x89\xE0\xB8\x88\xE0\xB9\x8A\xE0\xB8\xB0\xE0\xB9\x86 \xE0\xB8\x88\xE0\xB9\x8B\xE0\xB8\xB2\xE0\xB9\x86 \xE0\xB8\x99\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x87\xE0\xB9\x80\xE0\xB8\xAD\xE0\xB8\xA2 \xE0\xB8\xAF", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, ThaiLowercase)
{
	std::string i = ReadRegular(3821, 665);
	EXPECT_UTF8EQ("  \xE0\xB9\x8F \xE0\xB9\x80\xE0\xB8\x9B\xE0\xB9\x87\xE0\xB8\x99\xE0\xB8\xA1\xE0\xB8\x99\xE0\xB8\xB8\xE0\xB8\xA9\xE0\xB8\xA2\xE0\xB9\x8C\xE0\xB8\xAA\xE0\xB8\xB8\xE0\xB8\x94\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB9\x80\xE0\xB8\xAA\xE0\xB8\xA3\xE0\xB8\xB4\xE0\xB8\x90\xE0\xB9\x80\xE0\xB8\xA5\xE0\xB8\xB4\xE0\xB8\xA8\xE0\xB8\x84\xE0\xB8\xB8\xE0\xB8\x93\xE0\xB8\x84\xE0\xB9\x88\xE0\xB8\xB2  \xE0\xB8\x81\xE0\xB8\xA7\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xA3\xE0\xB8\xA3\xE0\xB8\x94\xE0\xB8\xB2\xE0\xB8\x9D\xE0\xB8\xB9\xE0\xB8\x87\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xA7\xE0\xB9\x8C\xE0\xB9\x80\xE0\xB8\x94\xE0\xB8\xA3\xE0\xB8\xB1\xE0\xB8\x88\xE0\xB8\x89\xE0\xB8\xB2\xE0\xB8\x99\n\
  \xE0\xB8\x88\xE0\xB8\x87\xE0\xB8\x9D\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x99\xE0\xB8\x9E\xE0\xB8\xB1\xE0\xB8\x92\xE0\xB8\x99\xE0\xB8\xB2\xE0\xB8\xA7\xE0\xB8\xB4\xE0\xB8\x8A\xE0\xB8\xB2\xE0\xB8\x81\xE0\xB8\xB2\xE0\xB8\xA3           \xE0\xB8\xAD\xE0\xB8\xA2\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\xA5\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87\xE0\xB8\x9C\xE0\xB8\xA5\xE0\xB8\xB2\xE0\xB8\x8D\xE0\xB8\xA4\xE0\xB9\x85\xE0\xB9\x80\xE0\xB8\x82\xE0\xB9\x88\xE0\xB8\x99\xE0\xB8\x86\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xB5\xE0\xB8\x91\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\x84\xE0\xB8\xA3\n\
  \xE0\xB9\x84\xE0\xB8\xA1\xE0\xB9\x88\xE0\xB8\x96\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB9\x82\xE0\xB8\x97\xE0\xB8\xA9\xE0\xB9\x82\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\x98\xE0\xB9\x81\xE0\xB8\x8A\xE0\xB9\x88\xE0\xB8\x87\xE0\xB8\x8B\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB6\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\x94\xE0\xB9\x88\xE0\xB8\xB2     \xE0\xB8\xAB\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAD\xE0\xB8\xA0\xE0\xB8\xB1\xE0\xB8\xA2\xE0\xB9\x80\xE0\xB8\xAB\xE0\xB8\xA1\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB8\x99\xE0\xB8\x81\xE0\xB8\xB5\xE0\xB8\xAC\xE0\xB8\xB2\xE0\xB8\xAD\xE0\xB8\xB1\xE0\xB8\x8A\xE0\xB8\x8C\xE0\xB8\xB2\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\xA2\n\
  \xE0\xB8\x9B\xE0\xB8\x8F\xE0\xB8\xB4\xE0\xB8\x9A\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB8\x9E\xE0\xB8\xA4\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x81\xE0\xB8\x8E\xE0\xB8\x81\xE0\xB8\xB3\xE0\xB8\xAB\xE0\xB8\x99\xE0\xB8\x94\xE0\xB9\x83\xE0\xB8\x88        \xE0\xB8\x9E\xE0\xB8\xB9\xE0\xB8\x94\xE0\xB8\x88\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\xAB\xE0\xB9\x89\xE0\xB8\x88\xE0\xB9\x8A\xE0\xB8\xB0\xE0\xB9\x86 \xE0\xB8\x88\xE0\xB9\x8B\xE0\xB8\xB2\xE0\xB9\x86 \xE0\xB8\x99\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x87\xE0\xB9\x80\xE0\xB8\xAD\xE0\xB8\xA2 \xE0\xB8\xAF", i.c_str());

	std::string el = ReadLowercase(3821, 665);
	EXPECT_UTF8EQ("  \xE0\xB9\x8F \xE0\xB9\x80\xE0\xB8\x9B\xE0\xB9\x87\xE0\xB8\x99\xE0\xB8\xA1\xE0\xB8\x99\xE0\xB8\xB8\xE0\xB8\xA9\xE0\xB8\xA2\xE0\xB9\x8C\xE0\xB8\xAA\xE0\xB8\xB8\xE0\xB8\x94\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB9\x80\xE0\xB8\xAA\xE0\xB8\xA3\xE0\xB8\xB4\xE0\xB8\x90\xE0\xB9\x80\xE0\xB8\xA5\xE0\xB8\xB4\xE0\xB8\xA8\xE0\xB8\x84\xE0\xB8\xB8\xE0\xB8\x93\xE0\xB8\x84\xE0\xB9\x88\xE0\xB8\xB2  \xE0\xB8\x81\xE0\xB8\xA7\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xA3\xE0\xB8\xA3\xE0\xB8\x94\xE0\xB8\xB2\xE0\xB8\x9D\xE0\xB8\xB9\xE0\xB8\x87\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xA7\xE0\xB9\x8C\xE0\xB9\x80\xE0\xB8\x94\xE0\xB8\xA3\xE0\xB8\xB1\xE0\xB8\x88\xE0\xB8\x89\xE0\xB8\xB2\xE0\xB8\x99\n\
  \xE0\xB8\x88\xE0\xB8\x87\xE0\xB8\x9D\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x99\xE0\xB8\x9E\xE0\xB8\xB1\xE0\xB8\x92\xE0\xB8\x99\xE0\xB8\xB2\xE0\xB8\xA7\xE0\xB8\xB4\xE0\xB8\x8A\xE0\xB8\xB2\xE0\xB8\x81\xE0\xB8\xB2\xE0\xB8\xA3           \xE0\xB8\xAD\xE0\xB8\xA2\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\xA5\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87\xE0\xB8\x9C\xE0\xB8\xA5\xE0\xB8\xB2\xE0\xB8\x8D\xE0\xB8\xA4\xE0\xB9\x85\xE0\xB9\x80\xE0\xB8\x82\xE0\xB9\x88\xE0\xB8\x99\xE0\xB8\x86\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xB5\xE0\xB8\x91\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\x84\xE0\xB8\xA3\n\
  \xE0\xB9\x84\xE0\xB8\xA1\xE0\xB9\x88\xE0\xB8\x96\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB9\x82\xE0\xB8\x97\xE0\xB8\xA9\xE0\xB9\x82\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\x98\xE0\xB9\x81\xE0\xB8\x8A\xE0\xB9\x88\xE0\xB8\x87\xE0\xB8\x8B\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB6\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\x94\xE0\xB9\x88\xE0\xB8\xB2     \xE0\xB8\xAB\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAD\xE0\xB8\xA0\xE0\xB8\xB1\xE0\xB8\xA2\xE0\xB9\x80\xE0\xB8\xAB\xE0\xB8\xA1\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB8\x99\xE0\xB8\x81\xE0\xB8\xB5\xE0\xB8\xAC\xE0\xB8\xB2\xE0\xB8\xAD\xE0\xB8\xB1\xE0\xB8\x8A\xE0\xB8\x8C\xE0\xB8\xB2\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\xA2\n\
  \xE0\xB8\x9B\xE0\xB8\x8F\xE0\xB8\xB4\xE0\xB8\x9A\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB8\x9E\xE0\xB8\xA4\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x81\xE0\xB8\x8E\xE0\xB8\x81\xE0\xB8\xB3\xE0\xB8\xAB\xE0\xB8\x99\xE0\xB8\x94\xE0\xB9\x83\xE0\xB8\x88        \xE0\xB8\x9E\xE0\xB8\xB9\xE0\xB8\x94\xE0\xB8\x88\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\xAB\xE0\xB9\x89\xE0\xB8\x88\xE0\xB9\x8A\xE0\xB8\xB0\xE0\xB9\x86 \xE0\xB8\x88\xE0\xB9\x8B\xE0\xB8\xB2\xE0\xB9\x86 \xE0\xB8\x99\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x87\xE0\xB9\x80\xE0\xB8\xAD\xE0\xB8\xA2 \xE0\xB8\xAF", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_DEFAULT, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  \xE0\xB9\x8F \xE0\xB9\x80\xE0\xB8\x9B\xE0\xB9\x87\xE0\xB8\x99\xE0\xB8\xA1\xE0\xB8\x99\xE0\xB8\xB8\xE0\xB8\xA9\xE0\xB8\xA2\xE0\xB9\x8C\xE0\xB8\xAA\xE0\xB8\xB8\xE0\xB8\x94\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB9\x80\xE0\xB8\xAA\xE0\xB8\xA3\xE0\xB8\xB4\xE0\xB8\x90\xE0\xB9\x80\xE0\xB8\xA5\xE0\xB8\xB4\xE0\xB8\xA8\xE0\xB8\x84\xE0\xB8\xB8\xE0\xB8\x93\xE0\xB8\x84\xE0\xB9\x88\xE0\xB8\xB2  \xE0\xB8\x81\xE0\xB8\xA7\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xA3\xE0\xB8\xA3\xE0\xB8\x94\xE0\xB8\xB2\xE0\xB8\x9D\xE0\xB8\xB9\xE0\xB8\x87\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xA7\xE0\xB9\x8C\xE0\xB9\x80\xE0\xB8\x94\xE0\xB8\xA3\xE0\xB8\xB1\xE0\xB8\x88\xE0\xB8\x89\xE0\xB8\xB2\xE0\xB8\x99\n\
  \xE0\xB8\x88\xE0\xB8\x87\xE0\xB8\x9D\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x99\xE0\xB8\x9E\xE0\xB8\xB1\xE0\xB8\x92\xE0\xB8\x99\xE0\xB8\xB2\xE0\xB8\xA7\xE0\xB8\xB4\xE0\xB8\x8A\xE0\xB8\xB2\xE0\xB8\x81\xE0\xB8\xB2\xE0\xB8\xA3           \xE0\xB8\xAD\xE0\xB8\xA2\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\xA5\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87\xE0\xB8\x9C\xE0\xB8\xA5\xE0\xB8\xB2\xE0\xB8\x8D\xE0\xB8\xA4\xE0\xB9\x85\xE0\xB9\x80\xE0\xB8\x82\xE0\xB9\x88\xE0\xB8\x99\xE0\xB8\x86\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xB5\xE0\xB8\x91\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\x84\xE0\xB8\xA3\n\
  \xE0\xB9\x84\xE0\xB8\xA1\xE0\xB9\x88\xE0\xB8\x96\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB9\x82\xE0\xB8\x97\xE0\xB8\xA9\xE0\xB9\x82\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\x98\xE0\xB9\x81\xE0\xB8\x8A\xE0\xB9\x88\xE0\xB8\x87\xE0\xB8\x8B\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB6\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\x94\xE0\xB9\x88\xE0\xB8\xB2     \xE0\xB8\xAB\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAD\xE0\xB8\xA0\xE0\xB8\xB1\xE0\xB8\xA2\xE0\xB9\x80\xE0\xB8\xAB\xE0\xB8\xA1\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB8\x99\xE0\xB8\x81\xE0\xB8\xB5\xE0\xB8\xAC\xE0\xB8\xB2\xE0\xB8\xAD\xE0\xB8\xB1\xE0\xB8\x8A\xE0\xB8\x8C\xE0\xB8\xB2\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\xA2\n\
  \xE0\xB8\x9B\xE0\xB8\x8F\xE0\xB8\xB4\xE0\xB8\x9A\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB8\x9E\xE0\xB8\xA4\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x81\xE0\xB8\x8E\xE0\xB8\x81\xE0\xB8\xB3\xE0\xB8\xAB\xE0\xB8\x99\xE0\xB8\x94\xE0\xB9\x83\xE0\xB8\x88        \xE0\xB8\x9E\xE0\xB8\xB9\xE0\xB8\x94\xE0\xB8\x88\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\xAB\xE0\xB9\x89\xE0\xB8\x88\xE0\xB9\x8A\xE0\xB8\xB0\xE0\xB9\x86 \xE0\xB8\x88\xE0\xB9\x8B\xE0\xB8\xB2\xE0\xB9\x86 \xE0\xB8\x99\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x87\xE0\xB9\x80\xE0\xB8\xAD\xE0\xB8\xA2 \xE0\xB8\xAF", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, ThaiTitlecase)
{
	std::string i = ReadRegular(3821, 665);
	EXPECT_UTF8EQ("  \xE0\xB9\x8F \xE0\xB9\x80\xE0\xB8\x9B\xE0\xB9\x87\xE0\xB8\x99\xE0\xB8\xA1\xE0\xB8\x99\xE0\xB8\xB8\xE0\xB8\xA9\xE0\xB8\xA2\xE0\xB9\x8C\xE0\xB8\xAA\xE0\xB8\xB8\xE0\xB8\x94\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB9\x80\xE0\xB8\xAA\xE0\xB8\xA3\xE0\xB8\xB4\xE0\xB8\x90\xE0\xB9\x80\xE0\xB8\xA5\xE0\xB8\xB4\xE0\xB8\xA8\xE0\xB8\x84\xE0\xB8\xB8\xE0\xB8\x93\xE0\xB8\x84\xE0\xB9\x88\xE0\xB8\xB2  \xE0\xB8\x81\xE0\xB8\xA7\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xA3\xE0\xB8\xA3\xE0\xB8\x94\xE0\xB8\xB2\xE0\xB8\x9D\xE0\xB8\xB9\xE0\xB8\x87\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xA7\xE0\xB9\x8C\xE0\xB9\x80\xE0\xB8\x94\xE0\xB8\xA3\xE0\xB8\xB1\xE0\xB8\x88\xE0\xB8\x89\xE0\xB8\xB2\xE0\xB8\x99\n\
  \xE0\xB8\x88\xE0\xB8\x87\xE0\xB8\x9D\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x99\xE0\xB8\x9E\xE0\xB8\xB1\xE0\xB8\x92\xE0\xB8\x99\xE0\xB8\xB2\xE0\xB8\xA7\xE0\xB8\xB4\xE0\xB8\x8A\xE0\xB8\xB2\xE0\xB8\x81\xE0\xB8\xB2\xE0\xB8\xA3           \xE0\xB8\xAD\xE0\xB8\xA2\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\xA5\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87\xE0\xB8\x9C\xE0\xB8\xA5\xE0\xB8\xB2\xE0\xB8\x8D\xE0\xB8\xA4\xE0\xB9\x85\xE0\xB9\x80\xE0\xB8\x82\xE0\xB9\x88\xE0\xB8\x99\xE0\xB8\x86\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xB5\xE0\xB8\x91\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\x84\xE0\xB8\xA3\n\
  \xE0\xB9\x84\xE0\xB8\xA1\xE0\xB9\x88\xE0\xB8\x96\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB9\x82\xE0\xB8\x97\xE0\xB8\xA9\xE0\xB9\x82\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\x98\xE0\xB9\x81\xE0\xB8\x8A\xE0\xB9\x88\xE0\xB8\x87\xE0\xB8\x8B\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB6\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\x94\xE0\xB9\x88\xE0\xB8\xB2     \xE0\xB8\xAB\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAD\xE0\xB8\xA0\xE0\xB8\xB1\xE0\xB8\xA2\xE0\xB9\x80\xE0\xB8\xAB\xE0\xB8\xA1\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB8\x99\xE0\xB8\x81\xE0\xB8\xB5\xE0\xB8\xAC\xE0\xB8\xB2\xE0\xB8\xAD\xE0\xB8\xB1\xE0\xB8\x8A\xE0\xB8\x8C\xE0\xB8\xB2\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\xA2\n\
  \xE0\xB8\x9B\xE0\xB8\x8F\xE0\xB8\xB4\xE0\xB8\x9A\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB8\x9E\xE0\xB8\xA4\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x81\xE0\xB8\x8E\xE0\xB8\x81\xE0\xB8\xB3\xE0\xB8\xAB\xE0\xB8\x99\xE0\xB8\x94\xE0\xB9\x83\xE0\xB8\x88        \xE0\xB8\x9E\xE0\xB8\xB9\xE0\xB8\x94\xE0\xB8\x88\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\xAB\xE0\xB9\x89\xE0\xB8\x88\xE0\xB9\x8A\xE0\xB8\xB0\xE0\xB9\x86 \xE0\xB8\x88\xE0\xB9\x8B\xE0\xB8\xB2\xE0\xB9\x86 \xE0\xB8\x99\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x87\xE0\xB9\x80\xE0\xB8\xAD\xE0\xB8\xA2 \xE0\xB8\xAF", i.c_str());

	std::string et = ReadTitlecase(3821, 665);
	EXPECT_UTF8EQ("  \xE0\xB9\x8F \xE0\xB9\x80\xE0\xB8\x9B\xE0\xB9\x87\xE0\xB8\x99\xE0\xB8\xA1\xE0\xB8\x99\xE0\xB8\xB8\xE0\xB8\xA9\xE0\xB8\xA2\xE0\xB9\x8C\xE0\xB8\xAA\xE0\xB8\xB8\xE0\xB8\x94\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB9\x80\xE0\xB8\xAA\xE0\xB8\xA3\xE0\xB8\xB4\xE0\xB8\x90\xE0\xB9\x80\xE0\xB8\xA5\xE0\xB8\xB4\xE0\xB8\xA8\xE0\xB8\x84\xE0\xB8\xB8\xE0\xB8\x93\xE0\xB8\x84\xE0\xB9\x88\xE0\xB8\xB2  \xE0\xB8\x81\xE0\xB8\xA7\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xA3\xE0\xB8\xA3\xE0\xB8\x94\xE0\xB8\xB2\xE0\xB8\x9D\xE0\xB8\xB9\xE0\xB8\x87\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xA7\xE0\xB9\x8C\xE0\xB9\x80\xE0\xB8\x94\xE0\xB8\xA3\xE0\xB8\xB1\xE0\xB8\x88\xE0\xB8\x89\xE0\xB8\xB2\xE0\xB8\x99\n\
  \xE0\xB8\x88\xE0\xB8\x87\xE0\xB8\x9D\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x99\xE0\xB8\x9E\xE0\xB8\xB1\xE0\xB8\x92\xE0\xB8\x99\xE0\xB8\xB2\xE0\xB8\xA7\xE0\xB8\xB4\xE0\xB8\x8A\xE0\xB8\xB2\xE0\xB8\x81\xE0\xB8\xB2\xE0\xB8\xA3           \xE0\xB8\xAD\xE0\xB8\xA2\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\xA5\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87\xE0\xB8\x9C\xE0\xB8\xA5\xE0\xB8\xB2\xE0\xB8\x8D\xE0\xB8\xA4\xE0\xB9\x85\xE0\xB9\x80\xE0\xB8\x82\xE0\xB9\x88\xE0\xB8\x99\xE0\xB8\x86\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xB5\xE0\xB8\x91\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\x84\xE0\xB8\xA3\n\
  \xE0\xB9\x84\xE0\xB8\xA1\xE0\xB9\x88\xE0\xB8\x96\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB9\x82\xE0\xB8\x97\xE0\xB8\xA9\xE0\xB9\x82\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\x98\xE0\xB9\x81\xE0\xB8\x8A\xE0\xB9\x88\xE0\xB8\x87\xE0\xB8\x8B\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB6\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\x94\xE0\xB9\x88\xE0\xB8\xB2     \xE0\xB8\xAB\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAD\xE0\xB8\xA0\xE0\xB8\xB1\xE0\xB8\xA2\xE0\xB9\x80\xE0\xB8\xAB\xE0\xB8\xA1\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB8\x99\xE0\xB8\x81\xE0\xB8\xB5\xE0\xB8\xAC\xE0\xB8\xB2\xE0\xB8\xAD\xE0\xB8\xB1\xE0\xB8\x8A\xE0\xB8\x8C\xE0\xB8\xB2\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\xA2\n\
  \xE0\xB8\x9B\xE0\xB8\x8F\xE0\xB8\xB4\xE0\xB8\x9A\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB8\x9E\xE0\xB8\xA4\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x81\xE0\xB8\x8E\xE0\xB8\x81\xE0\xB8\xB3\xE0\xB8\xAB\xE0\xB8\x99\xE0\xB8\x94\xE0\xB9\x83\xE0\xB8\x88        \xE0\xB8\x9E\xE0\xB8\xB9\xE0\xB8\x94\xE0\xB8\x88\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\xAB\xE0\xB9\x89\xE0\xB8\x88\xE0\xB9\x8A\xE0\xB8\xB0\xE0\xB9\x86 \xE0\xB8\x88\xE0\xB9\x8B\xE0\xB8\xB2\xE0\xB9\x86 \xE0\xB8\x99\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x87\xE0\xB9\x80\xE0\xB8\xAD\xE0\xB8\xA2 \xE0\xB8\xAF", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_DEFAULT, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_DEFAULT, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  \xE0\xB9\x8F \xE0\xB9\x80\xE0\xB8\x9B\xE0\xB9\x87\xE0\xB8\x99\xE0\xB8\xA1\xE0\xB8\x99\xE0\xB8\xB8\xE0\xB8\xA9\xE0\xB8\xA2\xE0\xB9\x8C\xE0\xB8\xAA\xE0\xB8\xB8\xE0\xB8\x94\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB9\x80\xE0\xB8\xAA\xE0\xB8\xA3\xE0\xB8\xB4\xE0\xB8\x90\xE0\xB9\x80\xE0\xB8\xA5\xE0\xB8\xB4\xE0\xB8\xA8\xE0\xB8\x84\xE0\xB8\xB8\xE0\xB8\x93\xE0\xB8\x84\xE0\xB9\x88\xE0\xB8\xB2  \xE0\xB8\x81\xE0\xB8\xA7\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xA3\xE0\xB8\xA3\xE0\xB8\x94\xE0\xB8\xB2\xE0\xB8\x9D\xE0\xB8\xB9\xE0\xB8\x87\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xA7\xE0\xB9\x8C\xE0\xB9\x80\xE0\xB8\x94\xE0\xB8\xA3\xE0\xB8\xB1\xE0\xB8\x88\xE0\xB8\x89\xE0\xB8\xB2\xE0\xB8\x99\n\
  \xE0\xB8\x88\xE0\xB8\x87\xE0\xB8\x9D\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x99\xE0\xB8\x9E\xE0\xB8\xB1\xE0\xB8\x92\xE0\xB8\x99\xE0\xB8\xB2\xE0\xB8\xA7\xE0\xB8\xB4\xE0\xB8\x8A\xE0\xB8\xB2\xE0\xB8\x81\xE0\xB8\xB2\xE0\xB8\xA3           \xE0\xB8\xAD\xE0\xB8\xA2\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\xA5\xE0\xB9\x89\xE0\xB8\xB2\xE0\xB8\x87\xE0\xB8\x9C\xE0\xB8\xA5\xE0\xB8\xB2\xE0\xB8\x8D\xE0\xB8\xA4\xE0\xB9\x85\xE0\xB9\x80\xE0\xB8\x82\xE0\xB9\x88\xE0\xB8\x99\xE0\xB8\x86\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9A\xE0\xB8\xB5\xE0\xB8\x91\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\x84\xE0\xB8\xA3\n\
  \xE0\xB9\x84\xE0\xB8\xA1\xE0\xB9\x88\xE0\xB8\x96\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB9\x82\xE0\xB8\x97\xE0\xB8\xA9\xE0\xB9\x82\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\x98\xE0\xB9\x81\xE0\xB8\x8A\xE0\xB9\x88\xE0\xB8\x87\xE0\xB8\x8B\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB6\xE0\xB8\x94\xE0\xB8\xAE\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\x94\xE0\xB9\x88\xE0\xB8\xB2     \xE0\xB8\xAB\xE0\xB8\xB1\xE0\xB8\x94\xE0\xB8\xAD\xE0\xB8\xA0\xE0\xB8\xB1\xE0\xB8\xA2\xE0\xB9\x80\xE0\xB8\xAB\xE0\xB8\xA1\xE0\xB8\xB7\xE0\xB8\xAD\xE0\xB8\x99\xE0\xB8\x81\xE0\xB8\xB5\xE0\xB8\xAC\xE0\xB8\xB2\xE0\xB8\xAD\xE0\xB8\xB1\xE0\xB8\x8A\xE0\xB8\x8C\xE0\xB8\xB2\xE0\xB8\xAA\xE0\xB8\xB1\xE0\xB8\xA2\n\
  \xE0\xB8\x9B\xE0\xB8\x8F\xE0\xB8\xB4\xE0\xB8\x9A\xE0\xB8\xB1\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x9B\xE0\xB8\xA3\xE0\xB8\xB0\xE0\xB8\x9E\xE0\xB8\xA4\xE0\xB8\x95\xE0\xB8\xB4\xE0\xB8\x81\xE0\xB8\x8E\xE0\xB8\x81\xE0\xB8\xB3\xE0\xB8\xAB\xE0\xB8\x99\xE0\xB8\x94\xE0\xB9\x83\xE0\xB8\x88        \xE0\xB8\x9E\xE0\xB8\xB9\xE0\xB8\x94\xE0\xB8\x88\xE0\xB8\xB2\xE0\xB9\x83\xE0\xB8\xAB\xE0\xB9\x89\xE0\xB8\x88\xE0\xB9\x8A\xE0\xB8\xB0\xE0\xB9\x86 \xE0\xB8\x88\xE0\xB9\x8B\xE0\xB8\xB2\xE0\xB9\x86 \xE0\xB8\x99\xE0\xB9\x88\xE0\xB8\xB2\xE0\xB8\x9F\xE0\xB8\xB1\xE0\xB8\x87\xE0\xB9\x80\xE0\xB8\xAD\xE0\xB8\xA2 \xE0\xB8\xAF", at);

	delete at;
}

TEST_F(QuickbrownCaseMapping, TurkishUppercase)
{
	std::string i = ReadRegular(4659, 54);
	EXPECT_UTF8EQ("  Pijamal\xC4\xB1 hasta, ya\xC4\x9F\xC4\xB1z \xC5\x9Fof\xC3\xB6re \xC3\xA7" "abucak g\xC3\xBCvendi.", i.c_str());

	std::string eu = ReadUppercase(4663, 54);
	EXPECT_UTF8EQ("  P\xC4\xB0JAMALI HASTA, YA\xC4\x9EIZ \xC5\x9EOF\xC3\x96RE \xC3\x87" "ABUCAK G\xC3\x9CVEND\xC4\xB0.", eu.c_str());

	size_t l = utf8toupper(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_TURKISH_AND_AZERI_LATIN, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* au = new char[l + 1];
	utf8toupper(i.c_str(), i.size() - 1, au, l, UTF8_LOCALE_TURKISH_AND_AZERI_LATIN, &errors);
	au[l] = 0;

	EXPECT_UTF8EQ("  P\xC4\xB0JAMALI HASTA, YA\xC4\x9EIZ \xC5\x9EOF\xC3\x96RE \xC3\x87" "ABUCAK G\xC3\x9CVEND\xC4\xB0.", au);

	delete au;
}

TEST_F(QuickbrownCaseMapping, TurkishLowercase)
{
	std::string i = ReadRegular(4659, 54);
	EXPECT_UTF8EQ("  Pijamal\xC4\xB1 hasta, ya\xC4\x9F\xC4\xB1z \xC5\x9Fof\xC3\xB6re \xC3\xA7" "abucak g\xC3\xBCvendi.", i.c_str());

	std::string el = ReadLowercase(4659, 54);
	EXPECT_UTF8EQ("  pijamal\xC4\xB1 hasta, ya\xC4\x9F\xC4\xB1z \xC5\x9Fof\xC3\xB6re \xC3\xA7" "abucak g\xC3\xBCvendi.", el.c_str());

	size_t l = utf8tolower(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_TURKISH_AND_AZERI_LATIN, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* al = new char[l + 1];
	utf8tolower(i.c_str(), i.size() - 1, al, l, UTF8_LOCALE_TURKISH_AND_AZERI_LATIN, &errors);
	al[l] = 0;

	EXPECT_UTF8EQ("  pijamal\xC4\xB1 hasta, ya\xC4\x9F\xC4\xB1z \xC5\x9Fof\xC3\xB6re \xC3\xA7" "abucak g\xC3\xBCvendi.", al);

	delete al;
}

TEST_F(QuickbrownCaseMapping, TurkishTitlecase)
{
	std::string i = ReadRegular(4659, 54);
	EXPECT_UTF8EQ("  Pijamal\xC4\xB1 hasta, ya\xC4\x9F\xC4\xB1z \xC5\x9Fof\xC3\xB6re \xC3\xA7" "abucak g\xC3\xBCvendi.", i.c_str());

	std::string et = ReadTitlecase(4659, 54);
	EXPECT_UTF8EQ("  Pijamal\xC4\xB1 Hasta, Ya\xC4\x9F\xC4\xB1z \xC5\x9Eof\xC3\xB6re \xC3\x87" "abucak G\xC3\xBCvendi.", et.c_str());

	size_t l = utf8totitle(i.c_str(), i.size() - 1, nullptr, 0, UTF8_LOCALE_TURKISH_AND_AZERI_LATIN, &errors);
	EXPECT_NE(0, l);
	ASSERT_EQ(0, errors);

	char* at = new char[l + 1];
	utf8totitle(i.c_str(), i.size() - 1, at, l, UTF8_LOCALE_TURKISH_AND_AZERI_LATIN, &errors);
	at[l] = 0;

	EXPECT_UTF8EQ("  Pijamal\xC4\xB1 Hasta, Ya\xC4\x9F\xC4\xB1z \xC5\x9Eof\xC3\xB6re \xC3\x87" "abucak G\xC3\xBCvendi.", at);

	delete at;
}